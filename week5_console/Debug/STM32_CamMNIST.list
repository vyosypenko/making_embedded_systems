
STM32_CamMNIST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004940  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  08004b38  08004b38  00014b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005008  08005008  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005008  08005008  00015008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005010  08005010  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005010  08005010  00015010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005014  08005014  00015014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  2000005c  08005074  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08005074  00020344  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aa00  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e2a  00000000  00000000  0002aacd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000878  00000000  00000000  0002c8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000664  00000000  00000000  0002d170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026124  00000000  00000000  0002d7d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d17f  00000000  00000000  000538f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f128e  00000000  00000000  00060a77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000220c  00000000  00000000  00151d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00153f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000005c 	.word	0x2000005c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004b20 	.word	0x08004b20

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000060 	.word	0x20000060
 8000234:	08004b20 	.word	0x08004b20

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b970 	b.w	8000540 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9e08      	ldr	r6, [sp, #32]
 800027e:	460d      	mov	r5, r1
 8000280:	4604      	mov	r4, r0
 8000282:	460f      	mov	r7, r1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d14a      	bne.n	800031e <__udivmoddi4+0xa6>
 8000288:	428a      	cmp	r2, r1
 800028a:	4694      	mov	ip, r2
 800028c:	d965      	bls.n	800035a <__udivmoddi4+0xe2>
 800028e:	fab2 f382 	clz	r3, r2
 8000292:	b143      	cbz	r3, 80002a6 <__udivmoddi4+0x2e>
 8000294:	fa02 fc03 	lsl.w	ip, r2, r3
 8000298:	f1c3 0220 	rsb	r2, r3, #32
 800029c:	409f      	lsls	r7, r3
 800029e:	fa20 f202 	lsr.w	r2, r0, r2
 80002a2:	4317      	orrs	r7, r2
 80002a4:	409c      	lsls	r4, r3
 80002a6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002aa:	fa1f f58c 	uxth.w	r5, ip
 80002ae:	fbb7 f1fe 	udiv	r1, r7, lr
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002bc:	fb01 f005 	mul.w	r0, r1, r5
 80002c0:	4290      	cmp	r0, r2
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x62>
 80002c4:	eb1c 0202 	adds.w	r2, ip, r2
 80002c8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002cc:	f080 811c 	bcs.w	8000508 <__udivmoddi4+0x290>
 80002d0:	4290      	cmp	r0, r2
 80002d2:	f240 8119 	bls.w	8000508 <__udivmoddi4+0x290>
 80002d6:	3902      	subs	r1, #2
 80002d8:	4462      	add	r2, ip
 80002da:	1a12      	subs	r2, r2, r0
 80002dc:	b2a4      	uxth	r4, r4
 80002de:	fbb2 f0fe 	udiv	r0, r2, lr
 80002e2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002e6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ea:	fb00 f505 	mul.w	r5, r0, r5
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x90>
 80002f2:	eb1c 0404 	adds.w	r4, ip, r4
 80002f6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002fa:	f080 8107 	bcs.w	800050c <__udivmoddi4+0x294>
 80002fe:	42a5      	cmp	r5, r4
 8000300:	f240 8104 	bls.w	800050c <__udivmoddi4+0x294>
 8000304:	4464      	add	r4, ip
 8000306:	3802      	subs	r0, #2
 8000308:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800030c:	1b64      	subs	r4, r4, r5
 800030e:	2100      	movs	r1, #0
 8000310:	b11e      	cbz	r6, 800031a <__udivmoddi4+0xa2>
 8000312:	40dc      	lsrs	r4, r3
 8000314:	2300      	movs	r3, #0
 8000316:	e9c6 4300 	strd	r4, r3, [r6]
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0xbc>
 8000322:	2e00      	cmp	r6, #0
 8000324:	f000 80ed 	beq.w	8000502 <__udivmoddi4+0x28a>
 8000328:	2100      	movs	r1, #0
 800032a:	e9c6 0500 	strd	r0, r5, [r6]
 800032e:	4608      	mov	r0, r1
 8000330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000334:	fab3 f183 	clz	r1, r3
 8000338:	2900      	cmp	r1, #0
 800033a:	d149      	bne.n	80003d0 <__udivmoddi4+0x158>
 800033c:	42ab      	cmp	r3, r5
 800033e:	d302      	bcc.n	8000346 <__udivmoddi4+0xce>
 8000340:	4282      	cmp	r2, r0
 8000342:	f200 80f8 	bhi.w	8000536 <__udivmoddi4+0x2be>
 8000346:	1a84      	subs	r4, r0, r2
 8000348:	eb65 0203 	sbc.w	r2, r5, r3
 800034c:	2001      	movs	r0, #1
 800034e:	4617      	mov	r7, r2
 8000350:	2e00      	cmp	r6, #0
 8000352:	d0e2      	beq.n	800031a <__udivmoddi4+0xa2>
 8000354:	e9c6 4700 	strd	r4, r7, [r6]
 8000358:	e7df      	b.n	800031a <__udivmoddi4+0xa2>
 800035a:	b902      	cbnz	r2, 800035e <__udivmoddi4+0xe6>
 800035c:	deff      	udf	#255	; 0xff
 800035e:	fab2 f382 	clz	r3, r2
 8000362:	2b00      	cmp	r3, #0
 8000364:	f040 8090 	bne.w	8000488 <__udivmoddi4+0x210>
 8000368:	1a8a      	subs	r2, r1, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2101      	movs	r1, #1
 8000374:	fbb2 f5f7 	udiv	r5, r2, r7
 8000378:	fb07 2015 	mls	r0, r7, r5, r2
 800037c:	0c22      	lsrs	r2, r4, #16
 800037e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000382:	fb0e f005 	mul.w	r0, lr, r5
 8000386:	4290      	cmp	r0, r2
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x124>
 800038a:	eb1c 0202 	adds.w	r2, ip, r2
 800038e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x122>
 8000394:	4290      	cmp	r0, r2
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2b8>
 800039a:	4645      	mov	r5, r8
 800039c:	1a12      	subs	r2, r2, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003a4:	fb07 2210 	mls	r2, r7, r0, r2
 80003a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x14e>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x14c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2c2>
 80003c4:	4610      	mov	r0, r2
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ce:	e79f      	b.n	8000310 <__udivmoddi4+0x98>
 80003d0:	f1c1 0720 	rsb	r7, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa05 f401 	lsl.w	r4, r5, r1
 80003e2:	fa20 f307 	lsr.w	r3, r0, r7
 80003e6:	40fd      	lsrs	r5, r7
 80003e8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ec:	4323      	orrs	r3, r4
 80003ee:	fbb5 f8f9 	udiv	r8, r5, r9
 80003f2:	fa1f fe8c 	uxth.w	lr, ip
 80003f6:	fb09 5518 	mls	r5, r9, r8, r5
 80003fa:	0c1c      	lsrs	r4, r3, #16
 80003fc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000400:	fb08 f50e 	mul.w	r5, r8, lr
 8000404:	42a5      	cmp	r5, r4
 8000406:	fa02 f201 	lsl.w	r2, r2, r1
 800040a:	fa00 f001 	lsl.w	r0, r0, r1
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b0>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2b4>
 800041c:	42a5      	cmp	r5, r4
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2b4>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4464      	add	r4, ip
 8000428:	1b64      	subs	r4, r4, r5
 800042a:	b29d      	uxth	r5, r3
 800042c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000430:	fb09 4413 	mls	r4, r9, r3, r4
 8000434:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000438:	fb03 fe0e 	mul.w	lr, r3, lr
 800043c:	45a6      	cmp	lr, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1da>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f103 35ff 	add.w	r5, r3, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2ac>
 800044a:	45a6      	cmp	lr, r4
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2ac>
 800044e:	3b02      	subs	r3, #2
 8000450:	4464      	add	r4, ip
 8000452:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000456:	fba3 9502 	umull	r9, r5, r3, r2
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	42ac      	cmp	r4, r5
 8000460:	46c8      	mov	r8, r9
 8000462:	46ae      	mov	lr, r5
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x29c>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x298>
 8000468:	b156      	cbz	r6, 8000480 <__udivmoddi4+0x208>
 800046a:	ebb0 0208 	subs.w	r2, r0, r8
 800046e:	eb64 040e 	sbc.w	r4, r4, lr
 8000472:	fa04 f707 	lsl.w	r7, r4, r7
 8000476:	40ca      	lsrs	r2, r1
 8000478:	40cc      	lsrs	r4, r1
 800047a:	4317      	orrs	r7, r2
 800047c:	e9c6 7400 	strd	r7, r4, [r6]
 8000480:	4618      	mov	r0, r3
 8000482:	2100      	movs	r1, #0
 8000484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000488:	f1c3 0120 	rsb	r1, r3, #32
 800048c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000490:	fa20 f201 	lsr.w	r2, r0, r1
 8000494:	fa25 f101 	lsr.w	r1, r5, r1
 8000498:	409d      	lsls	r5, r3
 800049a:	432a      	orrs	r2, r5
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a8:	fb07 1510 	mls	r5, r7, r0, r1
 80004ac:	0c11      	lsrs	r1, r2, #16
 80004ae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004b2:	fb00 f50e 	mul.w	r5, r0, lr
 80004b6:	428d      	cmp	r5, r1
 80004b8:	fa04 f403 	lsl.w	r4, r4, r3
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x258>
 80004be:	eb1c 0101 	adds.w	r1, ip, r1
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004c8:	428d      	cmp	r5, r1
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	1b49      	subs	r1, r1, r5
 80004d2:	b292      	uxth	r2, r2
 80004d4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d8:	fb07 1115 	mls	r1, r7, r5, r1
 80004dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e0:	fb05 f10e 	mul.w	r1, r5, lr
 80004e4:	4291      	cmp	r1, r2
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x282>
 80004e8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ec:	f105 38ff 	add.w	r8, r5, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 80004f2:	4291      	cmp	r1, r2
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2a8>
 80004f6:	3d02      	subs	r5, #2
 80004f8:	4462      	add	r2, ip
 80004fa:	1a52      	subs	r2, r2, r1
 80004fc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0xfc>
 8000502:	4631      	mov	r1, r6
 8000504:	4630      	mov	r0, r6
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xa2>
 8000508:	4639      	mov	r1, r7
 800050a:	e6e6      	b.n	80002da <__udivmoddi4+0x62>
 800050c:	4610      	mov	r0, r2
 800050e:	e6fb      	b.n	8000308 <__udivmoddi4+0x90>
 8000510:	4548      	cmp	r0, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f0>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb65 0e0c 	sbc.w	lr, r5, ip
 800051c:	3b01      	subs	r3, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f0>
 8000520:	4645      	mov	r5, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x282>
 8000524:	462b      	mov	r3, r5
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1da>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x258>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b0>
 8000530:	3d02      	subs	r5, #2
 8000532:	4462      	add	r2, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x124>
 8000536:	4608      	mov	r0, r1
 8000538:	e70a      	b.n	8000350 <__udivmoddi4+0xd8>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x14e>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08a      	sub	sp, #40	; 0x28
 8000548:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800055a:	4b23      	ldr	r3, [pc, #140]	; (80005e8 <MX_GPIO_Init+0xa4>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a22      	ldr	r2, [pc, #136]	; (80005e8 <MX_GPIO_Init+0xa4>)
 8000560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b20      	ldr	r3, [pc, #128]	; (80005e8 <MX_GPIO_Init+0xa4>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000572:	4b1d      	ldr	r3, [pc, #116]	; (80005e8 <MX_GPIO_Init+0xa4>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a1c      	ldr	r2, [pc, #112]	; (80005e8 <MX_GPIO_Init+0xa4>)
 8000578:	f043 0308 	orr.w	r3, r3, #8
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <MX_GPIO_Init+0xa4>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0308 	and.w	r3, r3, #8
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058a:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <MX_GPIO_Init+0xa4>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a16      	ldr	r2, [pc, #88]	; (80005e8 <MX_GPIO_Init+0xa4>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <MX_GPIO_Init+0xa4>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <MX_GPIO_Init+0xa4>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a10      	ldr	r2, [pc, #64]	; (80005e8 <MX_GPIO_Init+0xa4>)
 80005a8:	f043 0302 	orr.w	r3, r3, #2
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <MX_GPIO_Init+0xa4>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0302 	and.w	r3, r3, #2
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2180      	movs	r1, #128	; 0x80
 80005be:	480b      	ldr	r0, [pc, #44]	; (80005ec <MX_GPIO_Init+0xa8>)
 80005c0:	f000 fea4 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005c4:	2380      	movs	r3, #128	; 0x80
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c8:	2301      	movs	r3, #1
 80005ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d0:	2300      	movs	r3, #0
 80005d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	4619      	mov	r1, r3
 80005da:	4804      	ldr	r0, [pc, #16]	; (80005ec <MX_GPIO_Init+0xa8>)
 80005dc:	f000 fb16 	bl	8000c0c <HAL_GPIO_Init>

}
 80005e0:	bf00      	nop
 80005e2:	3728      	adds	r7, #40	; 0x28
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40020400 	.word	0x40020400

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 f9a3 	bl	800093e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f80a 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f7ff ffa2 	bl	8000544 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000600:	f000 f8e4 	bl	80007cc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  ConsoleInit();
 8000604:	f003 fde2 	bl	80041cc <ConsoleInit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	ConsoleProcess();
 8000608:	f003 fe0e 	bl	8004228 <ConsoleProcess>
 800060c:	e7fc      	b.n	8000608 <main+0x18>
	...

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	2234      	movs	r2, #52	; 0x34
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f004 fa4c 	bl	8004abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	4b2b      	ldr	r3, [pc, #172]	; (80006e4 <SystemClock_Config+0xd4>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	4a2a      	ldr	r2, [pc, #168]	; (80006e4 <SystemClock_Config+0xd4>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	; 0x40
 8000640:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <SystemClock_Config+0xd4>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064c:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <SystemClock_Config+0xd8>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a25      	ldr	r2, [pc, #148]	; (80006e8 <SystemClock_Config+0xd8>)
 8000652:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <SystemClock_Config+0xd8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000660:	603b      	str	r3, [r7, #0]
 8000662:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000664:	2301      	movs	r3, #1
 8000666:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000676:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000678:	2304      	movs	r3, #4
 800067a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800067c:	23d8      	movs	r3, #216	; 0xd8
 800067e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000684:	2302      	movs	r3, #2
 8000686:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000688:	2302      	movs	r3, #2
 800068a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	4618      	mov	r0, r3
 8000692:	f000 feb7 	bl	8001404 <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800069c:	f000 f826 	bl	80006ec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006a0:	f000 fe60 	bl	8001364 <HAL_PWREx_EnableOverDrive>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006aa:	f000 f81f 	bl	80006ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	230f      	movs	r3, #15
 80006b0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	2302      	movs	r3, #2
 80006b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006c6:	f107 0308 	add.w	r3, r7, #8
 80006ca:	2107      	movs	r1, #7
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 fa09 	bl	8001ae4 <HAL_RCC_ClockConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80006d8:	f000 f808 	bl	80006ec <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3750      	adds	r7, #80	; 0x50
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <Error_Handler+0x8>

080006f6 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
 80006fe:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <HAL_MspInit+0x44>)
 8000714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000716:	4a0e      	ldr	r2, [pc, #56]	; (8000750 <HAL_MspInit+0x44>)
 8000718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071c:	6413      	str	r3, [r2, #64]	; 0x40
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <HAL_MspInit+0x44>)
 8000720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <HAL_MspInit+0x44>)
 800072c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072e:	4a08      	ldr	r2, [pc, #32]	; (8000750 <HAL_MspInit+0x44>)
 8000730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000734:	6453      	str	r3, [r2, #68]	; 0x44
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <HAL_MspInit+0x44>)
 8000738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800

08000754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <NMI_Handler+0x4>

0800075a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <HardFault_Handler+0x4>

08000760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <MemManage_Handler+0x4>

08000766 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <BusFault_Handler+0x4>

0800076c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <UsageFault_Handler+0x4>

08000772 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr

0800078e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a0:	f000 f90a 	bl	80009b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <SystemInit+0x20>)
 80007ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007b2:	4a05      	ldr	r2, [pc, #20]	; (80007c8 <SystemInit+0x20>)
 80007b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_USART3_UART_Init+0x58>)
 80007d2:	4a15      	ldr	r2, [pc, #84]	; (8000828 <MX_USART3_UART_Init+0x5c>)
 80007d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007d6:	4b13      	ldr	r3, [pc, #76]	; (8000824 <MX_USART3_UART_Init+0x58>)
 80007d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_USART3_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_USART3_UART_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_USART3_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_USART3_UART_Init+0x58>)
 80007f2:	220c      	movs	r2, #12
 80007f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_USART3_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_USART3_UART_Init+0x58>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_USART3_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_USART3_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_USART3_UART_Init+0x58>)
 8000810:	f002 fcb4 	bl	800317c <HAL_UART_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800081a:	f7ff ff67 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000078 	.word	0x20000078
 8000828:	40004800 	.word	0x40004800

0800082c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b0ae      	sub	sp, #184	; 0xb8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	2290      	movs	r2, #144	; 0x90
 800084a:	2100      	movs	r1, #0
 800084c:	4618      	mov	r0, r3
 800084e:	f004 f935 	bl	8004abc <memset>
  if(uartHandle->Instance==USART3)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a22      	ldr	r2, [pc, #136]	; (80008e0 <HAL_UART_MspInit+0xb4>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d13c      	bne.n	80008d6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800085c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000860:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000862:	2300      	movs	r3, #0
 8000864:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fc1c 	bl	80020a8 <HAL_RCCEx_PeriphCLKConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000876:	f7ff ff39 	bl	80006ec <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800087a:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <HAL_UART_MspInit+0xb8>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	4a19      	ldr	r2, [pc, #100]	; (80008e4 <HAL_UART_MspInit+0xb8>)
 8000880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000884:	6413      	str	r3, [r2, #64]	; 0x40
 8000886:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <HAL_UART_MspInit+0xb8>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <HAL_UART_MspInit+0xb8>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a13      	ldr	r2, [pc, #76]	; (80008e4 <HAL_UART_MspInit+0xb8>)
 8000898:	f043 0308 	orr.w	r3, r3, #8
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <HAL_UART_MspInit+0xb8>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0308 	and.w	r3, r3, #8
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = CONSOLE_TX_Pin|CONSOLE_RX_Pin;
 80008aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008be:	2303      	movs	r3, #3
 80008c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008c4:	2307      	movs	r3, #7
 80008c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008ce:	4619      	mov	r1, r3
 80008d0:	4805      	ldr	r0, [pc, #20]	; (80008e8 <HAL_UART_MspInit+0xbc>)
 80008d2:	f000 f99b 	bl	8000c0c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80008d6:	bf00      	nop
 80008d8:	37b8      	adds	r7, #184	; 0xb8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40004800 	.word	0x40004800
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40020c00 	.word	0x40020c00

080008ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000924 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008f0:	480d      	ldr	r0, [pc, #52]	; (8000928 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008f2:	490e      	ldr	r1, [pc, #56]	; (800092c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008f4:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f8:	e002      	b.n	8000900 <LoopCopyDataInit>

080008fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fe:	3304      	adds	r3, #4

08000900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000904:	d3f9      	bcc.n	80008fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000906:	4a0b      	ldr	r2, [pc, #44]	; (8000934 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000908:	4c0b      	ldr	r4, [pc, #44]	; (8000938 <LoopFillZerobss+0x26>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800090c:	e001      	b.n	8000912 <LoopFillZerobss>

0800090e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000910:	3204      	adds	r2, #4

08000912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000914:	d3fb      	bcc.n	800090e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000916:	f7ff ff47 	bl	80007a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800091a:	f004 f8dd 	bl	8004ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800091e:	f7ff fe67 	bl	80005f0 <main>
  bx  lr    
 8000922:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000924:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800092c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000930:	08005018 	.word	0x08005018
  ldr r2, =_sbss
 8000934:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000938:	20000344 	.word	0x20000344

0800093c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800093c:	e7fe      	b.n	800093c <ADC_IRQHandler>

0800093e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000942:	2003      	movs	r0, #3
 8000944:	f000 f90a 	bl	8000b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000948:	200f      	movs	r0, #15
 800094a:	f000 f805 	bl	8000958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800094e:	f7ff fedd 	bl	800070c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000952:	2300      	movs	r3, #0
}
 8000954:	4618      	mov	r0, r3
 8000956:	bd80      	pop	{r7, pc}

08000958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_InitTick+0x54>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_InitTick+0x58>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000972:	fbb2 f3f3 	udiv	r3, r2, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f93c 	bl	8000bf4 <HAL_SYSTICK_Config>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e00e      	b.n	80009a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b0f      	cmp	r3, #15
 800098a:	d80a      	bhi.n	80009a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098c:	2200      	movs	r2, #0
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	f000 f902 	bl	8000b9c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000998:	4a06      	ldr	r2, [pc, #24]	; (80009b4 <HAL_InitTick+0x5c>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800099e:	2300      	movs	r3, #0
 80009a0:	e000      	b.n	80009a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000000 	.word	0x20000000
 80009b0:	20000008 	.word	0x20000008
 80009b4:	20000004 	.word	0x20000004

080009b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_IncTick+0x20>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_IncTick+0x24>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4413      	add	r3, r2
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <HAL_IncTick+0x24>)
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000008 	.word	0x20000008
 80009dc:	20000100 	.word	0x20000100

080009e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return uwTick;
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <HAL_GetTick+0x14>)
 80009e6:	681b      	ldr	r3, [r3, #0]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000100 	.word	0x20000100

080009f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f003 0307 	and.w	r3, r3, #7
 8000a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <__NVIC_SetPriorityGrouping+0x40>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a14:	4013      	ands	r3, r2
 8000a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <__NVIC_SetPriorityGrouping+0x44>)
 8000a22:	4313      	orrs	r3, r2
 8000a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a26:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <__NVIC_SetPriorityGrouping+0x40>)
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	60d3      	str	r3, [r2, #12]
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000ed00 	.word	0xe000ed00
 8000a3c:	05fa0000 	.word	0x05fa0000

08000a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <__NVIC_GetPriorityGrouping+0x18>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	0a1b      	lsrs	r3, r3, #8
 8000a4a:	f003 0307 	and.w	r3, r3, #7
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	6039      	str	r1, [r7, #0]
 8000a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	db0a      	blt.n	8000a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	490c      	ldr	r1, [pc, #48]	; (8000aa8 <__NVIC_SetPriority+0x4c>)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	0112      	lsls	r2, r2, #4
 8000a7c:	b2d2      	uxtb	r2, r2
 8000a7e:	440b      	add	r3, r1
 8000a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a84:	e00a      	b.n	8000a9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4908      	ldr	r1, [pc, #32]	; (8000aac <__NVIC_SetPriority+0x50>)
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	f003 030f 	and.w	r3, r3, #15
 8000a92:	3b04      	subs	r3, #4
 8000a94:	0112      	lsls	r2, r2, #4
 8000a96:	b2d2      	uxtb	r2, r2
 8000a98:	440b      	add	r3, r1
 8000a9a:	761a      	strb	r2, [r3, #24]
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000e100 	.word	0xe000e100
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b089      	sub	sp, #36	; 0x24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	f1c3 0307 	rsb	r3, r3, #7
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	bf28      	it	cs
 8000ace:	2304      	movcs	r3, #4
 8000ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	2b06      	cmp	r3, #6
 8000ad8:	d902      	bls.n	8000ae0 <NVIC_EncodePriority+0x30>
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3b03      	subs	r3, #3
 8000ade:	e000      	b.n	8000ae2 <NVIC_EncodePriority+0x32>
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43da      	mvns	r2, r3
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	401a      	ands	r2, r3
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af8:	f04f 31ff 	mov.w	r1, #4294967295
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	fa01 f303 	lsl.w	r3, r1, r3
 8000b02:	43d9      	mvns	r1, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	4313      	orrs	r3, r2
         );
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3724      	adds	r7, #36	; 0x24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
	...

08000b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b28:	d301      	bcc.n	8000b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e00f      	b.n	8000b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <SysTick_Config+0x40>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b36:	210f      	movs	r1, #15
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	f7ff ff8e 	bl	8000a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <SysTick_Config+0x40>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b46:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <SysTick_Config+0x40>)
 8000b48:	2207      	movs	r2, #7
 8000b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	e000e010 	.word	0xe000e010

08000b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2b07      	cmp	r3, #7
 8000b68:	d00f      	beq.n	8000b8a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b06      	cmp	r3, #6
 8000b6e:	d00c      	beq.n	8000b8a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b05      	cmp	r3, #5
 8000b74:	d009      	beq.n	8000b8a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b04      	cmp	r3, #4
 8000b7a:	d006      	beq.n	8000b8a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	d003      	beq.n	8000b8a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b82:	2191      	movs	r1, #145	; 0x91
 8000b84:	4804      	ldr	r0, [pc, #16]	; (8000b98 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000b86:	f7ff fdb6 	bl	80006f6 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ff34 	bl	80009f8 <__NVIC_SetPriorityGrouping>
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	08004b38 	.word	0x08004b38

08000b9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
 8000ba8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	d903      	bls.n	8000bbc <HAL_NVIC_SetPriority+0x20>
 8000bb4:	21a9      	movs	r1, #169	; 0xa9
 8000bb6:	480e      	ldr	r0, [pc, #56]	; (8000bf0 <HAL_NVIC_SetPriority+0x54>)
 8000bb8:	f7ff fd9d 	bl	80006f6 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	2b0f      	cmp	r3, #15
 8000bc0:	d903      	bls.n	8000bca <HAL_NVIC_SetPriority+0x2e>
 8000bc2:	21aa      	movs	r1, #170	; 0xaa
 8000bc4:	480a      	ldr	r0, [pc, #40]	; (8000bf0 <HAL_NVIC_SetPriority+0x54>)
 8000bc6:	f7ff fd96 	bl	80006f6 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bca:	f7ff ff39 	bl	8000a40 <__NVIC_GetPriorityGrouping>
 8000bce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	68b9      	ldr	r1, [r7, #8]
 8000bd4:	6978      	ldr	r0, [r7, #20]
 8000bd6:	f7ff ff6b 	bl	8000ab0 <NVIC_EncodePriority>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be0:	4611      	mov	r1, r2
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff ff3a 	bl	8000a5c <__NVIC_SetPriority>
}
 8000be8:	bf00      	nop
 8000bea:	3718      	adds	r7, #24
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	08004b38 	.word	0x08004b38

08000bf4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff ff8b 	bl	8000b18 <SysTick_Config>
 8000c02:	4603      	mov	r3, r0
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b088      	sub	sp, #32
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a3a      	ldr	r2, [pc, #232]	; (8000d14 <HAL_GPIO_Init+0x108>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d02b      	beq.n	8000c86 <HAL_GPIO_Init+0x7a>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a39      	ldr	r2, [pc, #228]	; (8000d18 <HAL_GPIO_Init+0x10c>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d027      	beq.n	8000c86 <HAL_GPIO_Init+0x7a>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a38      	ldr	r2, [pc, #224]	; (8000d1c <HAL_GPIO_Init+0x110>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d023      	beq.n	8000c86 <HAL_GPIO_Init+0x7a>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a37      	ldr	r2, [pc, #220]	; (8000d20 <HAL_GPIO_Init+0x114>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d01f      	beq.n	8000c86 <HAL_GPIO_Init+0x7a>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a36      	ldr	r2, [pc, #216]	; (8000d24 <HAL_GPIO_Init+0x118>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d01b      	beq.n	8000c86 <HAL_GPIO_Init+0x7a>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a35      	ldr	r2, [pc, #212]	; (8000d28 <HAL_GPIO_Init+0x11c>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d017      	beq.n	8000c86 <HAL_GPIO_Init+0x7a>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a34      	ldr	r2, [pc, #208]	; (8000d2c <HAL_GPIO_Init+0x120>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d013      	beq.n	8000c86 <HAL_GPIO_Init+0x7a>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a33      	ldr	r2, [pc, #204]	; (8000d30 <HAL_GPIO_Init+0x124>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d00f      	beq.n	8000c86 <HAL_GPIO_Init+0x7a>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a32      	ldr	r2, [pc, #200]	; (8000d34 <HAL_GPIO_Init+0x128>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d00b      	beq.n	8000c86 <HAL_GPIO_Init+0x7a>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a31      	ldr	r2, [pc, #196]	; (8000d38 <HAL_GPIO_Init+0x12c>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d007      	beq.n	8000c86 <HAL_GPIO_Init+0x7a>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a30      	ldr	r2, [pc, #192]	; (8000d3c <HAL_GPIO_Init+0x130>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d003      	beq.n	8000c86 <HAL_GPIO_Init+0x7a>
 8000c7e:	21aa      	movs	r1, #170	; 0xaa
 8000c80:	482f      	ldr	r0, [pc, #188]	; (8000d40 <HAL_GPIO_Init+0x134>)
 8000c82:	f7ff fd38 	bl	80006f6 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d103      	bne.n	8000c98 <HAL_GPIO_Init+0x8c>
 8000c90:	21ab      	movs	r1, #171	; 0xab
 8000c92:	482b      	ldr	r0, [pc, #172]	; (8000d40 <HAL_GPIO_Init+0x134>)
 8000c94:	f7ff fd2f 	bl	80006f6 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d035      	beq.n	8000d0c <HAL_GPIO_Init+0x100>
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d031      	beq.n	8000d0c <HAL_GPIO_Init+0x100>
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	2b11      	cmp	r3, #17
 8000cae:	d02d      	beq.n	8000d0c <HAL_GPIO_Init+0x100>
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d029      	beq.n	8000d0c <HAL_GPIO_Init+0x100>
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	2b12      	cmp	r3, #18
 8000cbe:	d025      	beq.n	8000d0c <HAL_GPIO_Init+0x100>
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8000cc8:	d020      	beq.n	8000d0c <HAL_GPIO_Init+0x100>
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8000cd2:	d01b      	beq.n	8000d0c <HAL_GPIO_Init+0x100>
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8000cdc:	d016      	beq.n	8000d0c <HAL_GPIO_Init+0x100>
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8000ce6:	d011      	beq.n	8000d0c <HAL_GPIO_Init+0x100>
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8000cf0:	d00c      	beq.n	8000d0c <HAL_GPIO_Init+0x100>
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8000cfa:	d007      	beq.n	8000d0c <HAL_GPIO_Init+0x100>
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	2b03      	cmp	r3, #3
 8000d02:	d003      	beq.n	8000d0c <HAL_GPIO_Init+0x100>
 8000d04:	21ac      	movs	r1, #172	; 0xac
 8000d06:	480e      	ldr	r0, [pc, #56]	; (8000d40 <HAL_GPIO_Init+0x134>)
 8000d08:	f7ff fcf5 	bl	80006f6 <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
 8000d10:	e2d6      	b.n	80012c0 <HAL_GPIO_Init+0x6b4>
 8000d12:	bf00      	nop
 8000d14:	40020000 	.word	0x40020000
 8000d18:	40020400 	.word	0x40020400
 8000d1c:	40020800 	.word	0x40020800
 8000d20:	40020c00 	.word	0x40020c00
 8000d24:	40021000 	.word	0x40021000
 8000d28:	40021400 	.word	0x40021400
 8000d2c:	40021800 	.word	0x40021800
 8000d30:	40021c00 	.word	0x40021c00
 8000d34:	40022000 	.word	0x40022000
 8000d38:	40022400 	.word	0x40022400
 8000d3c:	40022800 	.word	0x40022800
 8000d40:	08004b74 	.word	0x08004b74
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000d44:	2201      	movs	r2, #1
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	f040 82ac 	bne.w	80012ba <HAL_GPIO_Init+0x6ae>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 0303 	and.w	r3, r3, #3
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d005      	beq.n	8000d7a <HAL_GPIO_Init+0x16e>
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 0303 	and.w	r3, r3, #3
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d144      	bne.n	8000e04 <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d00f      	beq.n	8000da2 <HAL_GPIO_Init+0x196>
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d00b      	beq.n	8000da2 <HAL_GPIO_Init+0x196>
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d007      	beq.n	8000da2 <HAL_GPIO_Init+0x196>
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	2b03      	cmp	r3, #3
 8000d98:	d003      	beq.n	8000da2 <HAL_GPIO_Init+0x196>
 8000d9a:	21bd      	movs	r1, #189	; 0xbd
 8000d9c:	4831      	ldr	r0, [pc, #196]	; (8000e64 <HAL_GPIO_Init+0x258>)
 8000d9e:	f7ff fcaa 	bl	80006f6 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	2203      	movs	r2, #3
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4013      	ands	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	68da      	ldr	r2, [r3, #12]
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dd8:	2201      	movs	r2, #1
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	091b      	lsrs	r3, r3, #4
 8000dee:	f003 0201 	and.w	r2, r3, #1
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 0303 	and.w	r3, r3, #3
 8000e0c:	2b03      	cmp	r3, #3
 8000e0e:	d02b      	beq.n	8000e68 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d00b      	beq.n	8000e30 <HAL_GPIO_Init+0x224>
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d007      	beq.n	8000e30 <HAL_GPIO_Init+0x224>
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d003      	beq.n	8000e30 <HAL_GPIO_Init+0x224>
 8000e28:	21ce      	movs	r1, #206	; 0xce
 8000e2a:	480e      	ldr	r0, [pc, #56]	; (8000e64 <HAL_GPIO_Init+0x258>)
 8000e2c:	f7ff fc63 	bl	80006f6 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	e002      	b.n	8000e68 <HAL_GPIO_Init+0x25c>
 8000e62:	bf00      	nop
 8000e64:	08004b74 	.word	0x08004b74
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 0303 	and.w	r3, r3, #3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	f040 8143 	bne.w	80010fc <HAL_GPIO_Init+0x4f0>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	691b      	ldr	r3, [r3, #16]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f000 811a 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	691b      	ldr	r3, [r3, #16]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	f000 8115 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	691b      	ldr	r3, [r3, #16]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f000 8110 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	691b      	ldr	r3, [r3, #16]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	f000 810b 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	691b      	ldr	r3, [r3, #16]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f000 8106 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	f000 8101 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	f000 80fc 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	691b      	ldr	r3, [r3, #16]
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	f000 80f7 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	691b      	ldr	r3, [r3, #16]
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	f000 80f2 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	691b      	ldr	r3, [r3, #16]
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	f000 80ed 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	691b      	ldr	r3, [r3, #16]
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	f000 80e8 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	691b      	ldr	r3, [r3, #16]
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	f000 80e3 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	691b      	ldr	r3, [r3, #16]
 8000ef2:	2b03      	cmp	r3, #3
 8000ef4:	f000 80de 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	691b      	ldr	r3, [r3, #16]
 8000efc:	2b03      	cmp	r3, #3
 8000efe:	f000 80d9 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	691b      	ldr	r3, [r3, #16]
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	f000 80d4 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	2b04      	cmp	r3, #4
 8000f12:	f000 80cf 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	691b      	ldr	r3, [r3, #16]
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	f000 80ca 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	691b      	ldr	r3, [r3, #16]
 8000f24:	2b04      	cmp	r3, #4
 8000f26:	f000 80c5 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	691b      	ldr	r3, [r3, #16]
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	f000 80c0 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	691b      	ldr	r3, [r3, #16]
 8000f38:	2b04      	cmp	r3, #4
 8000f3a:	f000 80bb 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	2b05      	cmp	r3, #5
 8000f44:	f000 80b6 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	2b05      	cmp	r3, #5
 8000f4e:	f000 80b1 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	691b      	ldr	r3, [r3, #16]
 8000f56:	2b05      	cmp	r3, #5
 8000f58:	f000 80ac 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	2b05      	cmp	r3, #5
 8000f62:	f000 80a7 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	691b      	ldr	r3, [r3, #16]
 8000f6a:	2b05      	cmp	r3, #5
 8000f6c:	f000 80a2 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	691b      	ldr	r3, [r3, #16]
 8000f74:	2b05      	cmp	r3, #5
 8000f76:	f000 809d 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	691b      	ldr	r3, [r3, #16]
 8000f7e:	2b06      	cmp	r3, #6
 8000f80:	f000 8098 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	691b      	ldr	r3, [r3, #16]
 8000f88:	2b06      	cmp	r3, #6
 8000f8a:	f000 8093 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	2b07      	cmp	r3, #7
 8000f94:	f000 808e 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	691b      	ldr	r3, [r3, #16]
 8000f9c:	2b07      	cmp	r3, #7
 8000f9e:	f000 8089 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	2b07      	cmp	r3, #7
 8000fa8:	f000 8084 	beq.w	80010b4 <HAL_GPIO_Init+0x4a8>
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	2b07      	cmp	r3, #7
 8000fb2:	d07f      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	2b07      	cmp	r3, #7
 8000fba:	d07b      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	691b      	ldr	r3, [r3, #16]
 8000fc0:	2b07      	cmp	r3, #7
 8000fc2:	d077      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	691b      	ldr	r3, [r3, #16]
 8000fc8:	2b07      	cmp	r3, #7
 8000fca:	d073      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	691b      	ldr	r3, [r3, #16]
 8000fd0:	2b08      	cmp	r3, #8
 8000fd2:	d06f      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	2b08      	cmp	r3, #8
 8000fda:	d06b      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	2b08      	cmp	r3, #8
 8000fe2:	d067      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	2b08      	cmp	r3, #8
 8000fea:	d063      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	2b08      	cmp	r3, #8
 8000ff2:	d05f      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	d05b      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	2b08      	cmp	r3, #8
 8001002:	d057      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	2b09      	cmp	r3, #9
 800100a:	d053      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	2b09      	cmp	r3, #9
 8001012:	d04f      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	2b09      	cmp	r3, #9
 800101a:	d04b      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	2b09      	cmp	r3, #9
 8001022:	d047      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	2b09      	cmp	r3, #9
 800102a:	d043      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	2b09      	cmp	r3, #9
 8001032:	d03f      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	2b0a      	cmp	r3, #10
 800103a:	d03b      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	2b09      	cmp	r3, #9
 8001042:	d037      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	2b0a      	cmp	r3, #10
 800104a:	d033      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	2b0a      	cmp	r3, #10
 8001052:	d02f      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	2b0a      	cmp	r3, #10
 800105a:	d02b      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	691b      	ldr	r3, [r3, #16]
 8001060:	2b0b      	cmp	r3, #11
 8001062:	d027      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	2b0a      	cmp	r3, #10
 800106a:	d023      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	2b0b      	cmp	r3, #11
 8001072:	d01f      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	2b0b      	cmp	r3, #11
 800107a:	d01b      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	691b      	ldr	r3, [r3, #16]
 8001080:	2b0c      	cmp	r3, #12
 8001082:	d017      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	2b0c      	cmp	r3, #12
 800108a:	d013      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	2b0c      	cmp	r3, #12
 8001092:	d00f      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	2b0f      	cmp	r3, #15
 800109a:	d00b      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	2b0d      	cmp	r3, #13
 80010a2:	d007      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	2b0e      	cmp	r3, #14
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x4a8>
 80010ac:	21db      	movs	r1, #219	; 0xdb
 80010ae:	4889      	ldr	r0, [pc, #548]	; (80012d4 <HAL_GPIO_Init+0x6c8>)
 80010b0:	f7ff fb21 	bl	80006f6 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	08da      	lsrs	r2, r3, #3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3208      	adds	r2, #8
 80010bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	220f      	movs	r2, #15
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	691a      	ldr	r2, [r3, #16]
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	08da      	lsrs	r2, r3, #3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3208      	adds	r2, #8
 80010f6:	69b9      	ldr	r1, [r7, #24]
 80010f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0203 	and.w	r2, r3, #3
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001138:	2b00      	cmp	r3, #0
 800113a:	f000 80be 	beq.w	80012ba <HAL_GPIO_Init+0x6ae>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113e:	4b66      	ldr	r3, [pc, #408]	; (80012d8 <HAL_GPIO_Init+0x6cc>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	4a65      	ldr	r2, [pc, #404]	; (80012d8 <HAL_GPIO_Init+0x6cc>)
 8001144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001148:	6453      	str	r3, [r2, #68]	; 0x44
 800114a:	4b63      	ldr	r3, [pc, #396]	; (80012d8 <HAL_GPIO_Init+0x6cc>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001156:	4a61      	ldr	r2, [pc, #388]	; (80012dc <HAL_GPIO_Init+0x6d0>)
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	3302      	adds	r3, #2
 800115e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	220f      	movs	r2, #15
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a58      	ldr	r2, [pc, #352]	; (80012e0 <HAL_GPIO_Init+0x6d4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d037      	beq.n	80011f2 <HAL_GPIO_Init+0x5e6>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a57      	ldr	r2, [pc, #348]	; (80012e4 <HAL_GPIO_Init+0x6d8>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d031      	beq.n	80011ee <HAL_GPIO_Init+0x5e2>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a56      	ldr	r2, [pc, #344]	; (80012e8 <HAL_GPIO_Init+0x6dc>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d02b      	beq.n	80011ea <HAL_GPIO_Init+0x5de>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a55      	ldr	r2, [pc, #340]	; (80012ec <HAL_GPIO_Init+0x6e0>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d025      	beq.n	80011e6 <HAL_GPIO_Init+0x5da>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a54      	ldr	r2, [pc, #336]	; (80012f0 <HAL_GPIO_Init+0x6e4>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d01f      	beq.n	80011e2 <HAL_GPIO_Init+0x5d6>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a53      	ldr	r2, [pc, #332]	; (80012f4 <HAL_GPIO_Init+0x6e8>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d019      	beq.n	80011de <HAL_GPIO_Init+0x5d2>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a52      	ldr	r2, [pc, #328]	; (80012f8 <HAL_GPIO_Init+0x6ec>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d013      	beq.n	80011da <HAL_GPIO_Init+0x5ce>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a51      	ldr	r2, [pc, #324]	; (80012fc <HAL_GPIO_Init+0x6f0>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d00d      	beq.n	80011d6 <HAL_GPIO_Init+0x5ca>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a50      	ldr	r2, [pc, #320]	; (8001300 <HAL_GPIO_Init+0x6f4>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d007      	beq.n	80011d2 <HAL_GPIO_Init+0x5c6>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4f      	ldr	r2, [pc, #316]	; (8001304 <HAL_GPIO_Init+0x6f8>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d101      	bne.n	80011ce <HAL_GPIO_Init+0x5c2>
 80011ca:	2309      	movs	r3, #9
 80011cc:	e012      	b.n	80011f4 <HAL_GPIO_Init+0x5e8>
 80011ce:	230a      	movs	r3, #10
 80011d0:	e010      	b.n	80011f4 <HAL_GPIO_Init+0x5e8>
 80011d2:	2308      	movs	r3, #8
 80011d4:	e00e      	b.n	80011f4 <HAL_GPIO_Init+0x5e8>
 80011d6:	2307      	movs	r3, #7
 80011d8:	e00c      	b.n	80011f4 <HAL_GPIO_Init+0x5e8>
 80011da:	2306      	movs	r3, #6
 80011dc:	e00a      	b.n	80011f4 <HAL_GPIO_Init+0x5e8>
 80011de:	2305      	movs	r3, #5
 80011e0:	e008      	b.n	80011f4 <HAL_GPIO_Init+0x5e8>
 80011e2:	2304      	movs	r3, #4
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x5e8>
 80011e6:	2303      	movs	r3, #3
 80011e8:	e004      	b.n	80011f4 <HAL_GPIO_Init+0x5e8>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_Init+0x5e8>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_GPIO_Init+0x5e8>
 80011f2:	2300      	movs	r3, #0
 80011f4:	69fa      	ldr	r2, [r7, #28]
 80011f6:	f002 0203 	and.w	r2, r2, #3
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	4093      	lsls	r3, r2
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001204:	4935      	ldr	r1, [pc, #212]	; (80012dc <HAL_GPIO_Init+0x6d0>)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001212:	4b3d      	ldr	r3, [pc, #244]	; (8001308 <HAL_GPIO_Init+0x6fc>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x62a>
        {
          temp |= iocurrent;
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001236:	4a34      	ldr	r2, [pc, #208]	; (8001308 <HAL_GPIO_Init+0x6fc>)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800123c:	4b32      	ldr	r3, [pc, #200]	; (8001308 <HAL_GPIO_Init+0x6fc>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x654>
        {
          temp |= iocurrent;
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001260:	4a29      	ldr	r2, [pc, #164]	; (8001308 <HAL_GPIO_Init+0x6fc>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001266:	4b28      	ldr	r3, [pc, #160]	; (8001308 <HAL_GPIO_Init+0x6fc>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x67e>
        {
          temp |= iocurrent;
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800128a:	4a1f      	ldr	r2, [pc, #124]	; (8001308 <HAL_GPIO_Init+0x6fc>)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001290:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <HAL_GPIO_Init+0x6fc>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x6a8>
        {
          temp |= iocurrent;
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012b4:	4a14      	ldr	r2, [pc, #80]	; (8001308 <HAL_GPIO_Init+0x6fc>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3301      	adds	r3, #1
 80012be:	61fb      	str	r3, [r7, #28]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	2b0f      	cmp	r3, #15
 80012c4:	f67f ad3e 	bls.w	8000d44 <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3720      	adds	r7, #32
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	08004b74 	.word	0x08004b74
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40013800 	.word	0x40013800
 80012e0:	40020000 	.word	0x40020000
 80012e4:	40020400 	.word	0x40020400
 80012e8:	40020800 	.word	0x40020800
 80012ec:	40020c00 	.word	0x40020c00
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40021400 	.word	0x40021400
 80012f8:	40021800 	.word	0x40021800
 80012fc:	40021c00 	.word	0x40021c00
 8001300:	40022000 	.word	0x40022000
 8001304:	40022400 	.word	0x40022400
 8001308:	40013c00 	.word	0x40013c00

0800130c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
 8001318:	4613      	mov	r3, r2
 800131a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800131c:	887b      	ldrh	r3, [r7, #2]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d104      	bne.n	800132c <HAL_GPIO_WritePin+0x20>
 8001322:	f240 1197 	movw	r1, #407	; 0x197
 8001326:	480e      	ldr	r0, [pc, #56]	; (8001360 <HAL_GPIO_WritePin+0x54>)
 8001328:	f7ff f9e5 	bl	80006f6 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800132c:	787b      	ldrb	r3, [r7, #1]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d007      	beq.n	8001342 <HAL_GPIO_WritePin+0x36>
 8001332:	787b      	ldrb	r3, [r7, #1]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d004      	beq.n	8001342 <HAL_GPIO_WritePin+0x36>
 8001338:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800133c:	4808      	ldr	r0, [pc, #32]	; (8001360 <HAL_GPIO_WritePin+0x54>)
 800133e:	f7ff f9da 	bl	80006f6 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001342:	787b      	ldrb	r3, [r7, #1]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001348:	887a      	ldrh	r2, [r7, #2]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800134e:	e003      	b.n	8001358 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001350:	887b      	ldrh	r3, [r7, #2]
 8001352:	041a      	lsls	r2, r3, #16
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	619a      	str	r2, [r3, #24]
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	08004b74 	.word	0x08004b74

08001364 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	4b23      	ldr	r3, [pc, #140]	; (80013fc <HAL_PWREx_EnableOverDrive+0x98>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	4a22      	ldr	r2, [pc, #136]	; (80013fc <HAL_PWREx_EnableOverDrive+0x98>)
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001378:	6413      	str	r3, [r2, #64]	; 0x40
 800137a:	4b20      	ldr	r3, [pc, #128]	; (80013fc <HAL_PWREx_EnableOverDrive+0x98>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001386:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a1d      	ldr	r2, [pc, #116]	; (8001400 <HAL_PWREx_EnableOverDrive+0x9c>)
 800138c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001390:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001392:	f7ff fb25 	bl	80009e0 <HAL_GetTick>
 8001396:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001398:	e009      	b.n	80013ae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800139a:	f7ff fb21 	bl	80009e0 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013a8:	d901      	bls.n	80013ae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e022      	b.n	80013f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013ae:	4b14      	ldr	r3, [pc, #80]	; (8001400 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ba:	d1ee      	bne.n	800139a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80013bc:	4b10      	ldr	r3, [pc, #64]	; (8001400 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0f      	ldr	r2, [pc, #60]	; (8001400 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013c8:	f7ff fb0a 	bl	80009e0 <HAL_GetTick>
 80013cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013ce:	e009      	b.n	80013e4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013d0:	f7ff fb06 	bl	80009e0 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013de:	d901      	bls.n	80013e4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e007      	b.n	80013f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013f0:	d1ee      	bne.n	80013d0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40023800 	.word	0x40023800
 8001400:	40007000 	.word	0x40007000

08001404 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800140c:	2300      	movs	r3, #0
 800140e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e35c      	b.n	8001ad4 <HAL_RCC_OscConfig+0x6d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b0f      	cmp	r3, #15
 8001420:	d904      	bls.n	800142c <HAL_RCC_OscConfig+0x28>
 8001422:	f240 1163 	movw	r1, #355	; 0x163
 8001426:	4892      	ldr	r0, [pc, #584]	; (8001670 <HAL_RCC_OscConfig+0x26c>)
 8001428:	f7ff f965 	bl	80006f6 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 809a 	beq.w	800156e <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00e      	beq.n	8001460 <HAL_RCC_OscConfig+0x5c>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800144a:	d009      	beq.n	8001460 <HAL_RCC_OscConfig+0x5c>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001454:	d004      	beq.n	8001460 <HAL_RCC_OscConfig+0x5c>
 8001456:	f240 1169 	movw	r1, #361	; 0x169
 800145a:	4885      	ldr	r0, [pc, #532]	; (8001670 <HAL_RCC_OscConfig+0x26c>)
 800145c:	f7ff f94b 	bl	80006f6 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001460:	4b84      	ldr	r3, [pc, #528]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 030c 	and.w	r3, r3, #12
 8001468:	2b04      	cmp	r3, #4
 800146a:	d00c      	beq.n	8001486 <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800146c:	4b81      	ldr	r3, [pc, #516]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f003 030c 	and.w	r3, r3, #12
 8001474:	2b08      	cmp	r3, #8
 8001476:	d112      	bne.n	800149e <HAL_RCC_OscConfig+0x9a>
 8001478:	4b7e      	ldr	r3, [pc, #504]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001480:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001484:	d10b      	bne.n	800149e <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001486:	4b7b      	ldr	r3, [pc, #492]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d06c      	beq.n	800156c <HAL_RCC_OscConfig+0x168>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d168      	bne.n	800156c <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e31a      	b.n	8001ad4 <HAL_RCC_OscConfig+0x6d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a6:	d106      	bne.n	80014b6 <HAL_RCC_OscConfig+0xb2>
 80014a8:	4b72      	ldr	r3, [pc, #456]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a71      	ldr	r2, [pc, #452]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	e02e      	b.n	8001514 <HAL_RCC_OscConfig+0x110>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10c      	bne.n	80014d8 <HAL_RCC_OscConfig+0xd4>
 80014be:	4b6d      	ldr	r3, [pc, #436]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a6c      	ldr	r2, [pc, #432]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	4b6a      	ldr	r3, [pc, #424]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a69      	ldr	r2, [pc, #420]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	e01d      	b.n	8001514 <HAL_RCC_OscConfig+0x110>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014e0:	d10c      	bne.n	80014fc <HAL_RCC_OscConfig+0xf8>
 80014e2:	4b64      	ldr	r3, [pc, #400]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a63      	ldr	r2, [pc, #396]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	4b61      	ldr	r3, [pc, #388]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a60      	ldr	r2, [pc, #384]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	e00b      	b.n	8001514 <HAL_RCC_OscConfig+0x110>
 80014fc:	4b5d      	ldr	r3, [pc, #372]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a5c      	ldr	r2, [pc, #368]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 8001502:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4b5a      	ldr	r3, [pc, #360]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a59      	ldr	r2, [pc, #356]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 800150e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d013      	beq.n	8001544 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151c:	f7ff fa60 	bl	80009e0 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001524:	f7ff fa5c 	bl	80009e0 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b64      	cmp	r3, #100	; 0x64
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e2ce      	b.n	8001ad4 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001536:	4b4f      	ldr	r3, [pc, #316]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0f0      	beq.n	8001524 <HAL_RCC_OscConfig+0x120>
 8001542:	e014      	b.n	800156e <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001544:	f7ff fa4c 	bl	80009e0 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154c:	f7ff fa48 	bl	80009e0 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	; 0x64
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e2ba      	b.n	8001ad4 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155e:	4b45      	ldr	r3, [pc, #276]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x148>
 800156a:	e000      	b.n	800156e <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 8084 	beq.w	8001684 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <HAL_RCC_OscConfig+0x192>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d004      	beq.n	8001596 <HAL_RCC_OscConfig+0x192>
 800158c:	f240 119b 	movw	r1, #411	; 0x19b
 8001590:	4837      	ldr	r0, [pc, #220]	; (8001670 <HAL_RCC_OscConfig+0x26c>)
 8001592:	f7ff f8b0 	bl	80006f6 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	2b1f      	cmp	r3, #31
 800159c:	d904      	bls.n	80015a8 <HAL_RCC_OscConfig+0x1a4>
 800159e:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80015a2:	4833      	ldr	r0, [pc, #204]	; (8001670 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	f7ff f8a7 	bl	80006f6 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015a8:	4b32      	ldr	r3, [pc, #200]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 030c 	and.w	r3, r3, #12
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00b      	beq.n	80015cc <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015b4:	4b2f      	ldr	r3, [pc, #188]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	2b08      	cmp	r3, #8
 80015be:	d11c      	bne.n	80015fa <HAL_RCC_OscConfig+0x1f6>
 80015c0:	4b2c      	ldr	r3, [pc, #176]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d116      	bne.n	80015fa <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015cc:	4b29      	ldr	r3, [pc, #164]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d005      	beq.n	80015e4 <HAL_RCC_OscConfig+0x1e0>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d001      	beq.n	80015e4 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e277      	b.n	8001ad4 <HAL_RCC_OscConfig+0x6d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e4:	4b23      	ldr	r3, [pc, #140]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	4920      	ldr	r1, [pc, #128]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f8:	e044      	b.n	8001684 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d023      	beq.n	800164a <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001602:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a1b      	ldr	r2, [pc, #108]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160e:	f7ff f9e7 	bl	80009e0 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001616:	f7ff f9e3 	bl	80009e0 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e255      	b.n	8001ad4 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	490c      	ldr	r1, [pc, #48]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 8001644:	4313      	orrs	r3, r2
 8001646:	600b      	str	r3, [r1, #0]
 8001648:	e01c      	b.n	8001684 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a09      	ldr	r2, [pc, #36]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 8001650:	f023 0301 	bic.w	r3, r3, #1
 8001654:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001656:	f7ff f9c3 	bl	80009e0 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165c:	e00c      	b.n	8001678 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800165e:	f7ff f9bf 	bl	80009e0 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d905      	bls.n	8001678 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e231      	b.n	8001ad4 <HAL_RCC_OscConfig+0x6d0>
 8001670:	08004bb0 	.word	0x08004bb0
 8001674:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001678:	4b7e      	ldr	r3, [pc, #504]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1ec      	bne.n	800165e <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	2b00      	cmp	r3, #0
 800168e:	d043      	beq.n	8001718 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d008      	beq.n	80016aa <HAL_RCC_OscConfig+0x2a6>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d004      	beq.n	80016aa <HAL_RCC_OscConfig+0x2a6>
 80016a0:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80016a4:	4874      	ldr	r0, [pc, #464]	; (8001878 <HAL_RCC_OscConfig+0x474>)
 80016a6:	f7ff f826 	bl	80006f6 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d019      	beq.n	80016e6 <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016b2:	4b70      	ldr	r3, [pc, #448]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80016b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016b6:	4a6f      	ldr	r2, [pc, #444]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016be:	f7ff f98f 	bl	80009e0 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c6:	f7ff f98b 	bl	80009e0 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e1fd      	b.n	8001ad4 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d8:	4b66      	ldr	r3, [pc, #408]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80016da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0f0      	beq.n	80016c6 <HAL_RCC_OscConfig+0x2c2>
 80016e4:	e018      	b.n	8001718 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016e6:	4b63      	ldr	r3, [pc, #396]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80016e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ea:	4a62      	ldr	r2, [pc, #392]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80016ec:	f023 0301 	bic.w	r3, r3, #1
 80016f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f2:	f7ff f975 	bl	80009e0 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016fa:	f7ff f971 	bl	80009e0 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e1e3      	b.n	8001ad4 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800170c:	4b59      	ldr	r3, [pc, #356]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 800170e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1f0      	bne.n	80016fa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 80bc 	beq.w	800189e <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00c      	beq.n	8001748 <HAL_RCC_OscConfig+0x344>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d008      	beq.n	8001748 <HAL_RCC_OscConfig+0x344>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	2b05      	cmp	r3, #5
 800173c:	d004      	beq.n	8001748 <HAL_RCC_OscConfig+0x344>
 800173e:	f240 2106 	movw	r1, #518	; 0x206
 8001742:	484d      	ldr	r0, [pc, #308]	; (8001878 <HAL_RCC_OscConfig+0x474>)
 8001744:	f7fe ffd7 	bl	80006f6 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001748:	4b4a      	ldr	r3, [pc, #296]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10d      	bne.n	8001770 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001754:	4b47      	ldr	r3, [pc, #284]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	4a46      	ldr	r2, [pc, #280]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 800175a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175e:	6413      	str	r3, [r2, #64]	; 0x40
 8001760:	4b44      	ldr	r3, [pc, #272]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800176c:	2301      	movs	r3, #1
 800176e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001770:	4b42      	ldr	r3, [pc, #264]	; (800187c <HAL_RCC_OscConfig+0x478>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001778:	2b00      	cmp	r3, #0
 800177a:	d118      	bne.n	80017ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800177c:	4b3f      	ldr	r3, [pc, #252]	; (800187c <HAL_RCC_OscConfig+0x478>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a3e      	ldr	r2, [pc, #248]	; (800187c <HAL_RCC_OscConfig+0x478>)
 8001782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001786:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001788:	f7ff f92a 	bl	80009e0 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001790:	f7ff f926 	bl	80009e0 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b64      	cmp	r3, #100	; 0x64
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e198      	b.n	8001ad4 <HAL_RCC_OscConfig+0x6d0>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017a2:	4b36      	ldr	r3, [pc, #216]	; (800187c <HAL_RCC_OscConfig+0x478>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f0      	beq.n	8001790 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d106      	bne.n	80017c4 <HAL_RCC_OscConfig+0x3c0>
 80017b6:	4b2f      	ldr	r3, [pc, #188]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80017b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ba:	4a2e      	ldr	r2, [pc, #184]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6713      	str	r3, [r2, #112]	; 0x70
 80017c2:	e02d      	b.n	8001820 <HAL_RCC_OscConfig+0x41c>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d10c      	bne.n	80017e6 <HAL_RCC_OscConfig+0x3e2>
 80017cc:	4b29      	ldr	r3, [pc, #164]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80017ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d0:	4a28      	ldr	r2, [pc, #160]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80017d2:	f023 0301 	bic.w	r3, r3, #1
 80017d6:	6713      	str	r3, [r2, #112]	; 0x70
 80017d8:	4b26      	ldr	r3, [pc, #152]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80017da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017dc:	4a25      	ldr	r2, [pc, #148]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80017de:	f023 0304 	bic.w	r3, r3, #4
 80017e2:	6713      	str	r3, [r2, #112]	; 0x70
 80017e4:	e01c      	b.n	8001820 <HAL_RCC_OscConfig+0x41c>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2b05      	cmp	r3, #5
 80017ec:	d10c      	bne.n	8001808 <HAL_RCC_OscConfig+0x404>
 80017ee:	4b21      	ldr	r3, [pc, #132]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80017f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f2:	4a20      	ldr	r2, [pc, #128]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80017f4:	f043 0304 	orr.w	r3, r3, #4
 80017f8:	6713      	str	r3, [r2, #112]	; 0x70
 80017fa:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80017fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fe:	4a1d      	ldr	r2, [pc, #116]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6713      	str	r3, [r2, #112]	; 0x70
 8001806:	e00b      	b.n	8001820 <HAL_RCC_OscConfig+0x41c>
 8001808:	4b1a      	ldr	r3, [pc, #104]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 800180a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180c:	4a19      	ldr	r2, [pc, #100]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 800180e:	f023 0301 	bic.w	r3, r3, #1
 8001812:	6713      	str	r3, [r2, #112]	; 0x70
 8001814:	4b17      	ldr	r3, [pc, #92]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001818:	4a16      	ldr	r2, [pc, #88]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 800181a:	f023 0304 	bic.w	r3, r3, #4
 800181e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d015      	beq.n	8001854 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001828:	f7ff f8da 	bl	80009e0 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800182e:	e00a      	b.n	8001846 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001830:	f7ff f8d6 	bl	80009e0 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	f241 3288 	movw	r2, #5000	; 0x1388
 800183e:	4293      	cmp	r3, r2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e146      	b.n	8001ad4 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001846:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0ee      	beq.n	8001830 <HAL_RCC_OscConfig+0x42c>
 8001852:	e01b      	b.n	800188c <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001854:	f7ff f8c4 	bl	80009e0 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800185a:	e011      	b.n	8001880 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185c:	f7ff f8c0 	bl	80009e0 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	f241 3288 	movw	r2, #5000	; 0x1388
 800186a:	4293      	cmp	r3, r2
 800186c:	d908      	bls.n	8001880 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e130      	b.n	8001ad4 <HAL_RCC_OscConfig+0x6d0>
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800
 8001878:	08004bb0 	.word	0x08004bb0
 800187c:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001880:	4b96      	ldr	r3, [pc, #600]	; (8001adc <HAL_RCC_OscConfig+0x6d8>)
 8001882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1e7      	bne.n	800185c <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800188c:	7dfb      	ldrb	r3, [r7, #23]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d105      	bne.n	800189e <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001892:	4b92      	ldr	r3, [pc, #584]	; (8001adc <HAL_RCC_OscConfig+0x6d8>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	4a91      	ldr	r2, [pc, #580]	; (8001adc <HAL_RCC_OscConfig+0x6d8>)
 8001898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00c      	beq.n	80018c0 <HAL_RCC_OscConfig+0x4bc>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d008      	beq.n	80018c0 <HAL_RCC_OscConfig+0x4bc>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d004      	beq.n	80018c0 <HAL_RCC_OscConfig+0x4bc>
 80018b6:	f240 214a 	movw	r1, #586	; 0x24a
 80018ba:	4889      	ldr	r0, [pc, #548]	; (8001ae0 <HAL_RCC_OscConfig+0x6dc>)
 80018bc:	f7fe ff1b 	bl	80006f6 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 8104 	beq.w	8001ad2 <HAL_RCC_OscConfig+0x6ce>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ca:	4b84      	ldr	r3, [pc, #528]	; (8001adc <HAL_RCC_OscConfig+0x6d8>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	f000 80c3 	beq.w	8001a5e <HAL_RCC_OscConfig+0x65a>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	2b02      	cmp	r3, #2
 80018de:	f040 80a4 	bne.w	8001a2a <HAL_RCC_OscConfig+0x626>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d009      	beq.n	80018fe <HAL_RCC_OscConfig+0x4fa>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018f2:	d004      	beq.n	80018fe <HAL_RCC_OscConfig+0x4fa>
 80018f4:	f240 2153 	movw	r1, #595	; 0x253
 80018f8:	4879      	ldr	r0, [pc, #484]	; (8001ae0 <HAL_RCC_OscConfig+0x6dc>)
 80018fa:	f7fe fefc 	bl	80006f6 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d903      	bls.n	800190e <HAL_RCC_OscConfig+0x50a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	2b3f      	cmp	r3, #63	; 0x3f
 800190c:	d904      	bls.n	8001918 <HAL_RCC_OscConfig+0x514>
 800190e:	f44f 7115 	mov.w	r1, #596	; 0x254
 8001912:	4873      	ldr	r0, [pc, #460]	; (8001ae0 <HAL_RCC_OscConfig+0x6dc>)
 8001914:	f7fe feef 	bl	80006f6 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191c:	2b31      	cmp	r3, #49	; 0x31
 800191e:	d904      	bls.n	800192a <HAL_RCC_OscConfig+0x526>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8001928:	d904      	bls.n	8001934 <HAL_RCC_OscConfig+0x530>
 800192a:	f240 2155 	movw	r1, #597	; 0x255
 800192e:	486c      	ldr	r0, [pc, #432]	; (8001ae0 <HAL_RCC_OscConfig+0x6dc>)
 8001930:	f7fe fee1 	bl	80006f6 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001938:	2b02      	cmp	r3, #2
 800193a:	d010      	beq.n	800195e <HAL_RCC_OscConfig+0x55a>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001940:	2b04      	cmp	r3, #4
 8001942:	d00c      	beq.n	800195e <HAL_RCC_OscConfig+0x55a>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001948:	2b06      	cmp	r3, #6
 800194a:	d008      	beq.n	800195e <HAL_RCC_OscConfig+0x55a>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001950:	2b08      	cmp	r3, #8
 8001952:	d004      	beq.n	800195e <HAL_RCC_OscConfig+0x55a>
 8001954:	f240 2156 	movw	r1, #598	; 0x256
 8001958:	4861      	ldr	r0, [pc, #388]	; (8001ae0 <HAL_RCC_OscConfig+0x6dc>)
 800195a:	f7fe fecc 	bl	80006f6 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	2b01      	cmp	r3, #1
 8001964:	d903      	bls.n	800196e <HAL_RCC_OscConfig+0x56a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196a:	2b0f      	cmp	r3, #15
 800196c:	d904      	bls.n	8001978 <HAL_RCC_OscConfig+0x574>
 800196e:	f240 2157 	movw	r1, #599	; 0x257
 8001972:	485b      	ldr	r0, [pc, #364]	; (8001ae0 <HAL_RCC_OscConfig+0x6dc>)
 8001974:	f7fe febf 	bl	80006f6 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	2b01      	cmp	r3, #1
 800197e:	d903      	bls.n	8001988 <HAL_RCC_OscConfig+0x584>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001984:	2b07      	cmp	r3, #7
 8001986:	d904      	bls.n	8001992 <HAL_RCC_OscConfig+0x58e>
 8001988:	f240 2159 	movw	r1, #601	; 0x259
 800198c:	4854      	ldr	r0, [pc, #336]	; (8001ae0 <HAL_RCC_OscConfig+0x6dc>)
 800198e:	f7fe feb2 	bl	80006f6 <assert_failed>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001992:	4b52      	ldr	r3, [pc, #328]	; (8001adc <HAL_RCC_OscConfig+0x6d8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a51      	ldr	r2, [pc, #324]	; (8001adc <HAL_RCC_OscConfig+0x6d8>)
 8001998:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800199c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199e:	f7ff f81f 	bl	80009e0 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x5b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a6:	f7ff f81b 	bl	80009e0 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x5b4>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e08d      	b.n	8001ad4 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b8:	4b48      	ldr	r3, [pc, #288]	; (8001adc <HAL_RCC_OscConfig+0x6d8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1f0      	bne.n	80019a6 <HAL_RCC_OscConfig+0x5a2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69da      	ldr	r2, [r3, #28]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	431a      	orrs	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	019b      	lsls	r3, r3, #6
 80019d4:	431a      	orrs	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019da:	085b      	lsrs	r3, r3, #1
 80019dc:	3b01      	subs	r3, #1
 80019de:	041b      	lsls	r3, r3, #16
 80019e0:	431a      	orrs	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e6:	061b      	lsls	r3, r3, #24
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	071b      	lsls	r3, r3, #28
 80019f0:	493a      	ldr	r1, [pc, #232]	; (8001adc <HAL_RCC_OscConfig+0x6d8>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f6:	4b39      	ldr	r3, [pc, #228]	; (8001adc <HAL_RCC_OscConfig+0x6d8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a38      	ldr	r2, [pc, #224]	; (8001adc <HAL_RCC_OscConfig+0x6d8>)
 80019fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a02:	f7fe ffed 	bl	80009e0 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x618>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a0a:	f7fe ffe9 	bl	80009e0 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e05b      	b.n	8001ad4 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1c:	4b2f      	ldr	r3, [pc, #188]	; (8001adc <HAL_RCC_OscConfig+0x6d8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0f0      	beq.n	8001a0a <HAL_RCC_OscConfig+0x606>
 8001a28:	e053      	b.n	8001ad2 <HAL_RCC_OscConfig+0x6ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2a:	4b2c      	ldr	r3, [pc, #176]	; (8001adc <HAL_RCC_OscConfig+0x6d8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a2b      	ldr	r2, [pc, #172]	; (8001adc <HAL_RCC_OscConfig+0x6d8>)
 8001a30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a36:	f7fe ffd3 	bl	80009e0 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x64c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a3e:	f7fe ffcf 	bl	80009e0 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e041      	b.n	8001ad4 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a50:	4b22      	ldr	r3, [pc, #136]	; (8001adc <HAL_RCC_OscConfig+0x6d8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1f0      	bne.n	8001a3e <HAL_RCC_OscConfig+0x63a>
 8001a5c:	e039      	b.n	8001ad2 <HAL_RCC_OscConfig+0x6ce>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001a5e:	4b1f      	ldr	r3, [pc, #124]	; (8001adc <HAL_RCC_OscConfig+0x6d8>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d030      	beq.n	8001ace <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d129      	bne.n	8001ace <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d122      	bne.n	8001ace <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a8e:	4013      	ands	r3, r2
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a94:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d119      	bne.n	8001ace <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa4:	085b      	lsrs	r3, r3, #1
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d10f      	bne.n	8001ace <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab8:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d107      	bne.n	8001ace <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac8:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d001      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x6ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <HAL_RCC_OscConfig+0x6d0>
      }
    }
  }
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	08004bb0 	.word	0x08004bb0

08001ae4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e18c      	b.n	8001e16 <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x28>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b0f      	cmp	r3, #15
 8001b0a:	d904      	bls.n	8001b16 <HAL_RCC_ClockConfig+0x32>
 8001b0c:	f240 21dd 	movw	r1, #733	; 0x2dd
 8001b10:	4887      	ldr	r0, [pc, #540]	; (8001d30 <HAL_RCC_ClockConfig+0x24c>)
 8001b12:	f7fe fdf0 	bl	80006f6 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d031      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x9c>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d02e      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x9c>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d02b      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x9c>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d028      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x9c>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d025      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x9c>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	2b05      	cmp	r3, #5
 8001b38:	d022      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x9c>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	2b06      	cmp	r3, #6
 8001b3e:	d01f      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x9c>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	2b07      	cmp	r3, #7
 8001b44:	d01c      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x9c>
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	d019      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x9c>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	2b09      	cmp	r3, #9
 8001b50:	d016      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x9c>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	2b0a      	cmp	r3, #10
 8001b56:	d013      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x9c>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	2b0b      	cmp	r3, #11
 8001b5c:	d010      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x9c>
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	2b0c      	cmp	r3, #12
 8001b62:	d00d      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x9c>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	2b0d      	cmp	r3, #13
 8001b68:	d00a      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x9c>
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	2b0e      	cmp	r3, #14
 8001b6e:	d007      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x9c>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	2b0f      	cmp	r3, #15
 8001b74:	d004      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x9c>
 8001b76:	f240 21de 	movw	r1, #734	; 0x2de
 8001b7a:	486d      	ldr	r0, [pc, #436]	; (8001d30 <HAL_RCC_ClockConfig+0x24c>)
 8001b7c:	f7fe fdbb 	bl	80006f6 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b80:	4b6c      	ldr	r3, [pc, #432]	; (8001d34 <HAL_RCC_ClockConfig+0x250>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 030f 	and.w	r3, r3, #15
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d910      	bls.n	8001bb0 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8e:	4b69      	ldr	r3, [pc, #420]	; (8001d34 <HAL_RCC_ClockConfig+0x250>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 020f 	bic.w	r2, r3, #15
 8001b96:	4967      	ldr	r1, [pc, #412]	; (8001d34 <HAL_RCC_ClockConfig+0x250>)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9e:	4b65      	ldr	r3, [pc, #404]	; (8001d34 <HAL_RCC_ClockConfig+0x250>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e132      	b.n	8001e16 <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d049      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d005      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bc8:	4b5b      	ldr	r3, [pc, #364]	; (8001d38 <HAL_RCC_ClockConfig+0x254>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	4a5a      	ldr	r2, [pc, #360]	; (8001d38 <HAL_RCC_ClockConfig+0x254>)
 8001bce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001be0:	4b55      	ldr	r3, [pc, #340]	; (8001d38 <HAL_RCC_ClockConfig+0x254>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	4a54      	ldr	r2, [pc, #336]	; (8001d38 <HAL_RCC_ClockConfig+0x254>)
 8001be6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d024      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x15a>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	2b80      	cmp	r3, #128	; 0x80
 8001bfa:	d020      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x15a>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	2b90      	cmp	r3, #144	; 0x90
 8001c02:	d01c      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x15a>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2ba0      	cmp	r3, #160	; 0xa0
 8001c0a:	d018      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x15a>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	2bb0      	cmp	r3, #176	; 0xb0
 8001c12:	d014      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x15a>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	2bc0      	cmp	r3, #192	; 0xc0
 8001c1a:	d010      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x15a>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2bd0      	cmp	r3, #208	; 0xd0
 8001c22:	d00c      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x15a>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2be0      	cmp	r3, #224	; 0xe0
 8001c2a:	d008      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x15a>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2bf0      	cmp	r3, #240	; 0xf0
 8001c32:	d004      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x15a>
 8001c34:	f240 3102 	movw	r1, #770	; 0x302
 8001c38:	483d      	ldr	r0, [pc, #244]	; (8001d30 <HAL_RCC_ClockConfig+0x24c>)
 8001c3a:	f7fe fd5c 	bl	80006f6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c3e:	4b3e      	ldr	r3, [pc, #248]	; (8001d38 <HAL_RCC_ClockConfig+0x254>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	493b      	ldr	r1, [pc, #236]	; (8001d38 <HAL_RCC_ClockConfig+0x254>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d051      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00c      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x19a>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d008      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x19a>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d004      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x19a>
 8001c74:	f240 3109 	movw	r1, #777	; 0x309
 8001c78:	482d      	ldr	r0, [pc, #180]	; (8001d30 <HAL_RCC_ClockConfig+0x24c>)
 8001c7a:	f7fe fd3c 	bl	80006f6 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d107      	bne.n	8001c96 <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c86:	4b2c      	ldr	r3, [pc, #176]	; (8001d38 <HAL_RCC_ClockConfig+0x254>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d115      	bne.n	8001cbe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e0bf      	b.n	8001e16 <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d107      	bne.n	8001cae <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c9e:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <HAL_RCC_ClockConfig+0x254>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d109      	bne.n	8001cbe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e0b3      	b.n	8001e16 <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cae:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <HAL_RCC_ClockConfig+0x254>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e0ab      	b.n	8001e16 <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cbe:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <HAL_RCC_ClockConfig+0x254>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f023 0203 	bic.w	r2, r3, #3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	491b      	ldr	r1, [pc, #108]	; (8001d38 <HAL_RCC_ClockConfig+0x254>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cd0:	f7fe fe86 	bl	80009e0 <HAL_GetTick>
 8001cd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd6:	e00a      	b.n	8001cee <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd8:	f7fe fe82 	bl	80009e0 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e093      	b.n	8001e16 <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cee:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <HAL_RCC_ClockConfig+0x254>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 020c 	and.w	r2, r3, #12
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d1eb      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <HAL_RCC_ClockConfig+0x250>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 030f 	and.w	r3, r3, #15
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d216      	bcs.n	8001d3c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_RCC_ClockConfig+0x250>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f023 020f 	bic.w	r2, r3, #15
 8001d16:	4907      	ldr	r1, [pc, #28]	; (8001d34 <HAL_RCC_ClockConfig+0x250>)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1e:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <HAL_RCC_ClockConfig+0x250>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d007      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e072      	b.n	8001e16 <HAL_RCC_ClockConfig+0x332>
 8001d30:	08004bb0 	.word	0x08004bb0
 8001d34:	40023c00 	.word	0x40023c00
 8001d38:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d025      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d018      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x29e>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d58:	d013      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x29e>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001d62:	d00e      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x29e>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001d6c:	d009      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x29e>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8001d76:	d004      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x29e>
 8001d78:	f240 3146 	movw	r1, #838	; 0x346
 8001d7c:	4828      	ldr	r0, [pc, #160]	; (8001e20 <HAL_RCC_ClockConfig+0x33c>)
 8001d7e:	f7fe fcba 	bl	80006f6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d82:	4b28      	ldr	r3, [pc, #160]	; (8001e24 <HAL_RCC_ClockConfig+0x340>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	4925      	ldr	r1, [pc, #148]	; (8001e24 <HAL_RCC_ClockConfig+0x340>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d026      	beq.n	8001dee <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d018      	beq.n	8001dda <HAL_RCC_ClockConfig+0x2f6>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001db0:	d013      	beq.n	8001dda <HAL_RCC_ClockConfig+0x2f6>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001dba:	d00e      	beq.n	8001dda <HAL_RCC_ClockConfig+0x2f6>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001dc4:	d009      	beq.n	8001dda <HAL_RCC_ClockConfig+0x2f6>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8001dce:	d004      	beq.n	8001dda <HAL_RCC_ClockConfig+0x2f6>
 8001dd0:	f240 314d 	movw	r1, #845	; 0x34d
 8001dd4:	4812      	ldr	r0, [pc, #72]	; (8001e20 <HAL_RCC_ClockConfig+0x33c>)
 8001dd6:	f7fe fc8e 	bl	80006f6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dda:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <HAL_RCC_ClockConfig+0x340>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	490e      	ldr	r1, [pc, #56]	; (8001e24 <HAL_RCC_ClockConfig+0x340>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dee:	f000 f821 	bl	8001e34 <HAL_RCC_GetSysClockFreq>
 8001df2:	4602      	mov	r2, r0
 8001df4:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <HAL_RCC_ClockConfig+0x340>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	091b      	lsrs	r3, r3, #4
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	490a      	ldr	r1, [pc, #40]	; (8001e28 <HAL_RCC_ClockConfig+0x344>)
 8001e00:	5ccb      	ldrb	r3, [r1, r3]
 8001e02:	fa22 f303 	lsr.w	r3, r2, r3
 8001e06:	4a09      	ldr	r2, [pc, #36]	; (8001e2c <HAL_RCC_ClockConfig+0x348>)
 8001e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <HAL_RCC_ClockConfig+0x34c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fda2 	bl	8000958 <HAL_InitTick>

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	08004bb0 	.word	0x08004bb0
 8001e24:	40023800 	.word	0x40023800
 8001e28:	08004d3c 	.word	0x08004d3c
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	20000004 	.word	0x20000004

08001e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e38:	b094      	sub	sp, #80	; 0x50
 8001e3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	647b      	str	r3, [r7, #68]	; 0x44
 8001e40:	2300      	movs	r3, #0
 8001e42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e44:	2300      	movs	r3, #0
 8001e46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e4c:	4b79      	ldr	r3, [pc, #484]	; (8002034 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d00d      	beq.n	8001e74 <HAL_RCC_GetSysClockFreq+0x40>
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	f200 80e1 	bhi.w	8002020 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d002      	beq.n	8001e68 <HAL_RCC_GetSysClockFreq+0x34>
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d003      	beq.n	8001e6e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e66:	e0db      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e68:	4b73      	ldr	r3, [pc, #460]	; (8002038 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e6c:	e0db      	b.n	8002026 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e6e:	4b73      	ldr	r3, [pc, #460]	; (800203c <HAL_RCC_GetSysClockFreq+0x208>)
 8001e70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e72:	e0d8      	b.n	8002026 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e74:	4b6f      	ldr	r3, [pc, #444]	; (8002034 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e7c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e7e:	4b6d      	ldr	r3, [pc, #436]	; (8002034 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d063      	beq.n	8001f52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e8a:	4b6a      	ldr	r3, [pc, #424]	; (8002034 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	099b      	lsrs	r3, r3, #6
 8001e90:	2200      	movs	r2, #0
 8001e92:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e9c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ea2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ea6:	4622      	mov	r2, r4
 8001ea8:	462b      	mov	r3, r5
 8001eaa:	f04f 0000 	mov.w	r0, #0
 8001eae:	f04f 0100 	mov.w	r1, #0
 8001eb2:	0159      	lsls	r1, r3, #5
 8001eb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eb8:	0150      	lsls	r0, r2, #5
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	4621      	mov	r1, r4
 8001ec0:	1a51      	subs	r1, r2, r1
 8001ec2:	6139      	str	r1, [r7, #16]
 8001ec4:	4629      	mov	r1, r5
 8001ec6:	eb63 0301 	sbc.w	r3, r3, r1
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ed8:	4659      	mov	r1, fp
 8001eda:	018b      	lsls	r3, r1, #6
 8001edc:	4651      	mov	r1, sl
 8001ede:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ee2:	4651      	mov	r1, sl
 8001ee4:	018a      	lsls	r2, r1, #6
 8001ee6:	4651      	mov	r1, sl
 8001ee8:	ebb2 0801 	subs.w	r8, r2, r1
 8001eec:	4659      	mov	r1, fp
 8001eee:	eb63 0901 	sbc.w	r9, r3, r1
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	f04f 0300 	mov.w	r3, #0
 8001efa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001efe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f06:	4690      	mov	r8, r2
 8001f08:	4699      	mov	r9, r3
 8001f0a:	4623      	mov	r3, r4
 8001f0c:	eb18 0303 	adds.w	r3, r8, r3
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	462b      	mov	r3, r5
 8001f14:	eb49 0303 	adc.w	r3, r9, r3
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f26:	4629      	mov	r1, r5
 8001f28:	024b      	lsls	r3, r1, #9
 8001f2a:	4621      	mov	r1, r4
 8001f2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f30:	4621      	mov	r1, r4
 8001f32:	024a      	lsls	r2, r1, #9
 8001f34:	4610      	mov	r0, r2
 8001f36:	4619      	mov	r1, r3
 8001f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f44:	f7fe f980 	bl	8000248 <__aeabi_uldivmod>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f50:	e058      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f52:	4b38      	ldr	r3, [pc, #224]	; (8002034 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	099b      	lsrs	r3, r3, #6
 8001f58:	2200      	movs	r2, #0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f62:	623b      	str	r3, [r7, #32]
 8001f64:	2300      	movs	r3, #0
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
 8001f68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f6c:	4642      	mov	r2, r8
 8001f6e:	464b      	mov	r3, r9
 8001f70:	f04f 0000 	mov.w	r0, #0
 8001f74:	f04f 0100 	mov.w	r1, #0
 8001f78:	0159      	lsls	r1, r3, #5
 8001f7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f7e:	0150      	lsls	r0, r2, #5
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4641      	mov	r1, r8
 8001f86:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f8a:	4649      	mov	r1, r9
 8001f8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	f04f 0300 	mov.w	r3, #0
 8001f98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001fa0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001fa4:	ebb2 040a 	subs.w	r4, r2, sl
 8001fa8:	eb63 050b 	sbc.w	r5, r3, fp
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	00eb      	lsls	r3, r5, #3
 8001fb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fba:	00e2      	lsls	r2, r4, #3
 8001fbc:	4614      	mov	r4, r2
 8001fbe:	461d      	mov	r5, r3
 8001fc0:	4643      	mov	r3, r8
 8001fc2:	18e3      	adds	r3, r4, r3
 8001fc4:	603b      	str	r3, [r7, #0]
 8001fc6:	464b      	mov	r3, r9
 8001fc8:	eb45 0303 	adc.w	r3, r5, r3
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	f04f 0300 	mov.w	r3, #0
 8001fd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fda:	4629      	mov	r1, r5
 8001fdc:	028b      	lsls	r3, r1, #10
 8001fde:	4621      	mov	r1, r4
 8001fe0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fe4:	4621      	mov	r1, r4
 8001fe6:	028a      	lsls	r2, r1, #10
 8001fe8:	4610      	mov	r0, r2
 8001fea:	4619      	mov	r1, r3
 8001fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fee:	2200      	movs	r2, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
 8001ff2:	61fa      	str	r2, [r7, #28]
 8001ff4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ff8:	f7fe f926 	bl	8000248 <__aeabi_uldivmod>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4613      	mov	r3, r2
 8002002:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_RCC_GetSysClockFreq+0x200>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	0c1b      	lsrs	r3, r3, #16
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	3301      	adds	r3, #1
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002014:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002018:	fbb2 f3f3 	udiv	r3, r2, r3
 800201c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800201e:	e002      	b.n	8002026 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002020:	4b05      	ldr	r3, [pc, #20]	; (8002038 <HAL_RCC_GetSysClockFreq+0x204>)
 8002022:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002024:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002028:	4618      	mov	r0, r3
 800202a:	3750      	adds	r7, #80	; 0x50
 800202c:	46bd      	mov	sp, r7
 800202e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002032:	bf00      	nop
 8002034:	40023800 	.word	0x40023800
 8002038:	00f42400 	.word	0x00f42400
 800203c:	007a1200 	.word	0x007a1200

08002040 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002044:	4b03      	ldr	r3, [pc, #12]	; (8002054 <HAL_RCC_GetHCLKFreq+0x14>)
 8002046:	681b      	ldr	r3, [r3, #0]
}
 8002048:	4618      	mov	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	20000000 	.word	0x20000000

08002058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800205c:	f7ff fff0 	bl	8002040 <HAL_RCC_GetHCLKFreq>
 8002060:	4602      	mov	r2, r0
 8002062:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	0a9b      	lsrs	r3, r3, #10
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	4903      	ldr	r1, [pc, #12]	; (800207c <HAL_RCC_GetPCLK1Freq+0x24>)
 800206e:	5ccb      	ldrb	r3, [r1, r3]
 8002070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002074:	4618      	mov	r0, r3
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40023800 	.word	0x40023800
 800207c:	08004d4c 	.word	0x08004d4c

08002080 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002084:	f7ff ffdc 	bl	8002040 <HAL_RCC_GetHCLKFreq>
 8002088:	4602      	mov	r2, r0
 800208a:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	0b5b      	lsrs	r3, r3, #13
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	4903      	ldr	r1, [pc, #12]	; (80020a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002096:	5ccb      	ldrb	r3, [r1, r3]
 8002098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800209c:	4618      	mov	r0, r3
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40023800 	.word	0x40023800
 80020a4:	08004d4c 	.word	0x08004d4c

080020a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f040 809e 	bne.w	800220e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f040 8097 	bne.w	800220e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0310 	and.w	r3, r3, #16
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f040 8090 	bne.w	800220e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f040 8089 	bne.w	800220e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002104:	2b00      	cmp	r3, #0
 8002106:	f040 8082 	bne.w	800220e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002112:	2b00      	cmp	r3, #0
 8002114:	d17b      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800211e:	2b00      	cmp	r3, #0
 8002120:	d175      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800212a:	2b00      	cmp	r3, #0
 800212c:	d16f      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002136:	2b00      	cmp	r3, #0
 8002138:	d169      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d163      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d15d      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d157      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d151      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d14b      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d145      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d13f      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d139      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d133      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d12d      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d127      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d121      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d11b      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d115      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10f      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0320 	and.w	r3, r3, #32
 8002202:	2b00      	cmp	r3, #0
 8002204:	d103      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002206:	2172      	movs	r1, #114	; 0x72
 8002208:	4895      	ldr	r0, [pc, #596]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 800220a:	f7fe fa74 	bl	80006f6 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d01f      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800221e:	2b00      	cmp	r3, #0
 8002220:	d008      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002226:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800222a:	d003      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800222c:	2178      	movs	r1, #120	; 0x78
 800222e:	488c      	ldr	r0, [pc, #560]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8002230:	f7fe fa61 	bl	80006f6 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002234:	4b8b      	ldr	r3, [pc, #556]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	4a8a      	ldr	r2, [pc, #552]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 800223a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800223e:	6093      	str	r3, [r2, #8]
 8002240:	4b88      	ldr	r3, [pc, #544]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002248:	4986      	ldr	r1, [pc, #536]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 800224a:	4313      	orrs	r3, r2
 800224c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      plli2sused = 1;
 8002256:	2301      	movs	r3, #1
 8002258:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d02e      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226a:	2b00      	cmp	r3, #0
 800226c:	d012      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002276:	d00d      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002280:	d008      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002286:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800228a:	d003      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800228c:	2188      	movs	r1, #136	; 0x88
 800228e:	4874      	ldr	r0, [pc, #464]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8002290:	f7fe fa31 	bl	80006f6 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002294:	4b73      	ldr	r3, [pc, #460]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8002296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800229a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a2:	4970      	ldr	r1, [pc, #448]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022b2:	d101      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x210>
    {
      plli2sused = 1;
 80022b4:	2301      	movs	r3, #1
 80022b6:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      pllsaiused = 1;
 80022c0:	2301      	movs	r3, #1
 80022c2:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d02e      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d012      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x256>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022e0:	d00d      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x256>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022ea:	d008      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x256>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022f4:	d003      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x256>
 80022f6:	219c      	movs	r1, #156	; 0x9c
 80022f8:	4859      	ldr	r0, [pc, #356]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 80022fa:	f7fe f9fc 	bl	80006f6 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022fe:	4b59      	ldr	r3, [pc, #356]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8002300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002304:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	4955      	ldr	r1, [pc, #340]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800231c:	d101      	bne.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      plli2sused = 1;
 800231e:	2301      	movs	r3, #1
 8002320:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      pllsaiused = 1;
 800232a:	2301      	movs	r3, #1
 800232c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
      plli2sused = 1;
 800233a:	2301      	movs	r3, #1
 800233c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0320 	and.w	r3, r3, #32
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 8185 	beq.w	8002656 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002354:	f000 80e0 	beq.w	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002360:	f000 80da 	beq.w	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002368:	4a3f      	ldr	r2, [pc, #252]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	f000 80d4 	beq.w	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002374:	4a3d      	ldr	r2, [pc, #244]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8002376:	4293      	cmp	r3, r2
 8002378:	f000 80ce 	beq.w	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	4a3b      	ldr	r2, [pc, #236]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8002382:	4293      	cmp	r3, r2
 8002384:	f000 80c8 	beq.w	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238c:	4a39      	ldr	r2, [pc, #228]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800238e:	4293      	cmp	r3, r2
 8002390:	f000 80c2 	beq.w	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002398:	4a37      	ldr	r2, [pc, #220]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800239a:	4293      	cmp	r3, r2
 800239c:	f000 80bc 	beq.w	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a4:	4a35      	ldr	r2, [pc, #212]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	f000 80b6 	beq.w	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b0:	4a33      	ldr	r2, [pc, #204]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	f000 80b0 	beq.w	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023bc:	4a31      	ldr	r2, [pc, #196]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	f000 80aa 	beq.w	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c8:	4a2f      	ldr	r2, [pc, #188]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	f000 80a4 	beq.w	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d4:	4a2d      	ldr	r2, [pc, #180]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	f000 809e 	beq.w	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e0:	4a2b      	ldr	r2, [pc, #172]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	f000 8098 	beq.w	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	4a29      	ldr	r2, [pc, #164]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	f000 8092 	beq.w	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f8:	4a27      	ldr	r2, [pc, #156]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	f000 808c 	beq.w	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	4a25      	ldr	r2, [pc, #148]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	f000 8086 	beq.w	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002410:	4a23      	ldr	r2, [pc, #140]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002412:	4293      	cmp	r3, r2
 8002414:	f000 8080 	beq.w	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	4a21      	ldr	r2, [pc, #132]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d07a      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	4a20      	ldr	r2, [pc, #128]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d075      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	4a1e      	ldr	r2, [pc, #120]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d070      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4a1d      	ldr	r2, [pc, #116]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d06b      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002444:	4a1b      	ldr	r2, [pc, #108]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d066      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	4a1a      	ldr	r2, [pc, #104]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x410>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d061      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002458:	4a18      	ldr	r2, [pc, #96]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x414>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d05c      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 800245e:	e02f      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8002460:	08004be8 	.word	0x08004be8
 8002464:	40023800 	.word	0x40023800
 8002468:	00020300 	.word	0x00020300
 800246c:	00030300 	.word	0x00030300
 8002470:	00040300 	.word	0x00040300
 8002474:	00050300 	.word	0x00050300
 8002478:	00060300 	.word	0x00060300
 800247c:	00070300 	.word	0x00070300
 8002480:	00080300 	.word	0x00080300
 8002484:	00090300 	.word	0x00090300
 8002488:	000a0300 	.word	0x000a0300
 800248c:	000b0300 	.word	0x000b0300
 8002490:	000c0300 	.word	0x000c0300
 8002494:	000d0300 	.word	0x000d0300
 8002498:	000e0300 	.word	0x000e0300
 800249c:	000f0300 	.word	0x000f0300
 80024a0:	00100300 	.word	0x00100300
 80024a4:	00110300 	.word	0x00110300
 80024a8:	00120300 	.word	0x00120300
 80024ac:	00130300 	.word	0x00130300
 80024b0:	00140300 	.word	0x00140300
 80024b4:	00150300 	.word	0x00150300
 80024b8:	00160300 	.word	0x00160300
 80024bc:	00170300 	.word	0x00170300
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c4:	4a50      	ldr	r2, [pc, #320]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d026      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	4a4f      	ldr	r2, [pc, #316]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d021      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	4a4d      	ldr	r2, [pc, #308]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d01c      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	4a4c      	ldr	r2, [pc, #304]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d017      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	4a4a      	ldr	r2, [pc, #296]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d012      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	4a49      	ldr	r2, [pc, #292]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d00d      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	4a47      	ldr	r2, [pc, #284]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d008      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	4a46      	ldr	r2, [pc, #280]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d003      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8002510:	21b7      	movs	r1, #183	; 0xb7
 8002512:	4845      	ldr	r0, [pc, #276]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8002514:	f7fe f8ef 	bl	80006f6 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002518:	4b44      	ldr	r3, [pc, #272]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	4a43      	ldr	r2, [pc, #268]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800251e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002522:	6413      	str	r3, [r2, #64]	; 0x40
 8002524:	4b41      	ldr	r3, [pc, #260]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002530:	4b3f      	ldr	r3, [pc, #252]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a3e      	ldr	r2, [pc, #248]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800253c:	f7fe fa50 	bl	80009e0 <HAL_GetTick>
 8002540:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002542:	e009      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002544:	f7fe fa4c 	bl	80009e0 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b64      	cmp	r3, #100	; 0x64
 8002550:	d902      	bls.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	f000 be0a 	b.w	800316c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002558:	4b35      	ldr	r3, [pc, #212]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0ef      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x49c>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002564:	4b31      	ldr	r3, [pc, #196]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8002566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002568:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256c:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d036      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x53a>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	429a      	cmp	r2, r3
 8002580:	d02f      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x53a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002582:	4b2a      	ldr	r3, [pc, #168]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8002584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800258a:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800258c:	4b27      	ldr	r3, [pc, #156]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800258e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002590:	4a26      	ldr	r2, [pc, #152]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8002592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002596:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002598:	4b24      	ldr	r3, [pc, #144]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800259a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259c:	4a23      	ldr	r2, [pc, #140]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800259e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80025a4:	4a21      	ldr	r2, [pc, #132]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025aa:	4b20      	ldr	r3, [pc, #128]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80025ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d115      	bne.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x53a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b6:	f7fe fa13 	bl	80009e0 <HAL_GetTick>
 80025ba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025bc:	e00b      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025be:	f7fe fa0f 	bl	80009e0 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d902      	bls.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	f000 bdcb 	b.w	800316c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d6:	4b15      	ldr	r3, [pc, #84]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80025d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0ed      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x516>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025ee:	d123      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x590>
 80025f0:	4b0e      	ldr	r3, [pc, #56]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025fc:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80025fe:	400b      	ands	r3, r1
 8002600:	490a      	ldr	r1, [pc, #40]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8002602:	4313      	orrs	r3, r2
 8002604:	608b      	str	r3, [r1, #8]
 8002606:	e01d      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002608:	00180300 	.word	0x00180300
 800260c:	00190300 	.word	0x00190300
 8002610:	001a0300 	.word	0x001a0300
 8002614:	001b0300 	.word	0x001b0300
 8002618:	001c0300 	.word	0x001c0300
 800261c:	001d0300 	.word	0x001d0300
 8002620:	001e0300 	.word	0x001e0300
 8002624:	001f0300 	.word	0x001f0300
 8002628:	08004be8 	.word	0x08004be8
 800262c:	40023800 	.word	0x40023800
 8002630:	40007000 	.word	0x40007000
 8002634:	0ffffcff 	.word	0x0ffffcff
 8002638:	4b9a      	ldr	r3, [pc, #616]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	4a99      	ldr	r2, [pc, #612]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800263e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002642:	6093      	str	r3, [r2, #8]
 8002644:	4b97      	ldr	r3, [pc, #604]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8002646:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002650:	4994      	ldr	r1, [pc, #592]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8002652:	4313      	orrs	r3, r2
 8002654:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0310 	and.w	r3, r3, #16
 800265e:	2b00      	cmp	r3, #0
 8002660:	d01d      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002666:	2b00      	cmp	r3, #0
 8002668:	d008      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002672:	d003      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002674:	21f1      	movs	r1, #241	; 0xf1
 8002676:	488c      	ldr	r0, [pc, #560]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8002678:	f7fe f83d 	bl	80006f6 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800267c:	4b89      	ldr	r3, [pc, #548]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800267e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002682:	4a88      	ldr	r2, [pc, #544]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8002684:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002688:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800268c:	4b85      	ldr	r3, [pc, #532]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800268e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002696:	4983      	ldr	r1, [pc, #524]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d01c      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00d      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x626>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ba:	d008      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x626>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026c4:	d003      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x626>
 80026c6:	21fb      	movs	r1, #251	; 0xfb
 80026c8:	4877      	ldr	r0, [pc, #476]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80026ca:	f7fe f814 	bl	80006f6 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026ce:	4b75      	ldr	r3, [pc, #468]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80026d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026dc:	4971      	ldr	r1, [pc, #452]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d01d      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x684>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00e      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002700:	d009      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002706:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800270a:	d004      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800270c:	f240 1105 	movw	r1, #261	; 0x105
 8002710:	4865      	ldr	r0, [pc, #404]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8002712:	f7fd fff0 	bl	80006f6 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002716:	4b63      	ldr	r3, [pc, #396]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8002718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002724:	495f      	ldr	r1, [pc, #380]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d01d      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00e      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002744:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002748:	d009      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800274e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002752:	d004      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8002754:	f240 110f 	movw	r1, #271	; 0x10f
 8002758:	4853      	ldr	r0, [pc, #332]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800275a:	f7fd ffcc 	bl	80006f6 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800275e:	4b51      	ldr	r3, [pc, #324]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8002760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002764:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800276c:	494d      	ldr	r1, [pc, #308]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800276e:	4313      	orrs	r3, r2
 8002770:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d01d      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x714>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00e      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002790:	d009      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002796:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800279a:	d004      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
 800279c:	f240 1119 	movw	r1, #281	; 0x119
 80027a0:	4841      	ldr	r0, [pc, #260]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80027a2:	f7fd ffa8 	bl	80006f6 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027a6:	4b3f      	ldr	r3, [pc, #252]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80027a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b4:	493b      	ldr	r1, [pc, #236]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d01f      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x760>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d010      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d00c      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d008      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d004      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80027e8:	f240 1123 	movw	r1, #291	; 0x123
 80027ec:	482e      	ldr	r0, [pc, #184]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80027ee:	f7fd ff82 	bl	80006f6 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027f2:	4b2c      	ldr	r3, [pc, #176]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80027f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f8:	f023 0203 	bic.w	r2, r3, #3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002800:	4928      	ldr	r1, [pc, #160]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002810:	2b00      	cmp	r3, #0
 8002812:	d01f      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002818:	2b00      	cmp	r3, #0
 800281a:	d010      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x796>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002820:	2b04      	cmp	r3, #4
 8002822:	d00c      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x796>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002828:	2b0c      	cmp	r3, #12
 800282a:	d008      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x796>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002830:	2b08      	cmp	r3, #8
 8002832:	d004      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x796>
 8002834:	f240 112d 	movw	r1, #301	; 0x12d
 8002838:	481b      	ldr	r0, [pc, #108]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800283a:	f7fd ff5c 	bl	80006f6 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800283e:	4b19      	ldr	r3, [pc, #100]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8002840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002844:	f023 020c 	bic.w	r2, r3, #12
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800284c:	4915      	ldr	r1, [pc, #84]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800284e:	4313      	orrs	r3, r2
 8002850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285c:	2b00      	cmp	r3, #0
 800285e:	d025      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x804>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002864:	2b00      	cmp	r3, #0
 8002866:	d010      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286c:	2b10      	cmp	r3, #16
 800286e:	d00c      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002874:	2b30      	cmp	r3, #48	; 0x30
 8002876:	d008      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287c:	2b20      	cmp	r3, #32
 800287e:	d004      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
 8002880:	f240 1137 	movw	r1, #311	; 0x137
 8002884:	4808      	ldr	r0, [pc, #32]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8002886:	f7fd ff36 	bl	80006f6 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800288a:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800288c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002890:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002898:	4902      	ldr	r1, [pc, #8]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028a0:	e004      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x804>
 80028a2:	bf00      	nop
 80028a4:	40023800 	.word	0x40023800
 80028a8:	08004be8 	.word	0x08004be8
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d01f      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x850>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d010      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x83a>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c4:	2b40      	cmp	r3, #64	; 0x40
 80028c6:	d00c      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x83a>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028cc:	2bc0      	cmp	r3, #192	; 0xc0
 80028ce:	d008      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x83a>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d4:	2b80      	cmp	r3, #128	; 0x80
 80028d6:	d004      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x83a>
 80028d8:	f240 1141 	movw	r1, #321	; 0x141
 80028dc:	48a0      	ldr	r0, [pc, #640]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 80028de:	f7fd ff0a 	bl	80006f6 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028e2:	4ba0      	ldr	r3, [pc, #640]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 80028e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f0:	499c      	ldr	r1, [pc, #624]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002900:	2b00      	cmp	r3, #0
 8002902:	d022      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002908:	2b00      	cmp	r3, #0
 800290a:	d013      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002914:	d00e      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800291e:	d009      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002928:	d004      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800292a:	f240 114b 	movw	r1, #331	; 0x14b
 800292e:	488c      	ldr	r0, [pc, #560]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8002930:	f7fd fee1 	bl	80006f6 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002934:	4b8b      	ldr	r3, [pc, #556]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8002936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002942:	4988      	ldr	r1, [pc, #544]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002952:	2b00      	cmp	r3, #0
 8002954:	d022      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295a:	2b00      	cmp	r3, #0
 800295c:	d013      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002966:	d00e      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002970:	d009      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800297a:	d004      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 800297c:	f240 1155 	movw	r1, #341	; 0x155
 8002980:	4877      	ldr	r0, [pc, #476]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8002982:	f7fd feb8 	bl	80006f6 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002986:	4b77      	ldr	r3, [pc, #476]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8002988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002994:	4973      	ldr	r1, [pc, #460]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d022      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x946>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d013      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x930>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b8:	d00e      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x930>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029c2:	d009      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x930>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029cc:	d004      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x930>
 80029ce:	f240 115f 	movw	r1, #351	; 0x15f
 80029d2:	4863      	ldr	r0, [pc, #396]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 80029d4:	f7fd fe8f 	bl	80006f6 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80029d8:	4b62      	ldr	r3, [pc, #392]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 80029da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e6:	495f      	ldr	r1, [pc, #380]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d022      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x998>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d013      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x982>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a0a:	d00e      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x982>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a10:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a14:	d009      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x982>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a1e:	d004      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x982>
 8002a20:	f240 1169 	movw	r1, #361	; 0x169
 8002a24:	484e      	ldr	r0, [pc, #312]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8002a26:	f7fd fe66 	bl	80006f6 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002a2a:	4b4e      	ldr	r3, [pc, #312]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8002a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a38:	494a      	ldr	r1, [pc, #296]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d018      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a54:	d008      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d004      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
 8002a5e:	f240 1173 	movw	r1, #371	; 0x173
 8002a62:	483f      	ldr	r0, [pc, #252]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8002a64:	f7fd fe47 	bl	80006f6 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a68:	4b3e      	ldr	r3, [pc, #248]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8002a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a76:	493b      	ldr	r1, [pc, #236]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d01f      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0xa22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a92:	d008      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d004      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 8002a9c:	f240 117d 	movw	r1, #381	; 0x17d
 8002aa0:	482f      	ldr	r0, [pc, #188]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8002aa2:	f7fd fe28 	bl	80006f6 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002aa6:	4b2f      	ldr	r3, [pc, #188]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8002aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ab4:	492b      	ldr	r1, [pc, #172]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ac0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ac4:	d101      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0xa22>
    {
      pllsaiused = 1;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    pllsaiused = 1;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d022      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0xa84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d013      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002af6:	d00e      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002afc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b00:	d009      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b0a:	d004      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 8002b0c:	f240 1195 	movw	r1, #405	; 0x195
 8002b10:	4813      	ldr	r0, [pc, #76]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8002b12:	f7fd fdf0 	bl	80006f6 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b16:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8002b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b24:	490f      	ldr	r1, [pc, #60]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d020      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0xad2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b42:	d009      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d004      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8002b4e:	f240 119f 	movw	r1, #415	; 0x19f
 8002b52:	4803      	ldr	r0, [pc, #12]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8002b54:	f7fd fdcf 	bl	80006f6 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b58:	4b02      	ldr	r3, [pc, #8]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8002b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5e:	e003      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 8002b60:	08004be8 	.word	0x08004be8
 8002b64:	40023800 	.word	0x40023800
 8002b68:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b72:	4943      	ldr	r1, [pc, #268]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d01b      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b90:	d009      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0xafe>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d004      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0xafe>
 8002b9c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002ba0:	4838      	ldr	r0, [pc, #224]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8002ba2:	f7fd fda8 	bl	80006f6 <assert_failed>

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002ba6:	4b36      	ldr	r3, [pc, #216]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bac:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bb6:	4932      	ldr	r1, [pc, #200]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d01b      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00a      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0xb42>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bde:	d004      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0xb42>
 8002be0:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8002be4:	4827      	ldr	r0, [pc, #156]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8002be6:	f7fd fd86 	bl	80006f6 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002bea:	4b25      	ldr	r3, [pc, #148]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bf0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfa:	4921      	ldr	r1, [pc, #132]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d01b      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00a      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c22:	d004      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8002c24:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8002c28:	4816      	ldr	r0, [pc, #88]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8002c2a:	f7fd fd64 	bl	80006f6 <assert_failed>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002c2e:	4b14      	ldr	r3, [pc, #80]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c34:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c3e:	4910      	ldr	r1, [pc, #64]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d006      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 8157 	beq.w	8002f08 <HAL_RCCEx_PeriphCLKConfig+0xe60>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c5a:	4b09      	ldr	r3, [pc, #36]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a08      	ldr	r2, [pc, #32]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002c60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c66:	f7fd febb 	bl	80009e0 <HAL_GetTick>
 8002c6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c6c:	e00c      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c6e:	f7fd feb7 	bl	80009e0 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b64      	cmp	r3, #100	; 0x64
 8002c7a:	d905      	bls.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e275      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8002c80:	40023800 	.word	0x40023800
 8002c84:	08004be8 	.word	0x08004be8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c88:	4b9a      	ldr	r3, [pc, #616]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1ec      	bne.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0xbc6>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b31      	cmp	r3, #49	; 0x31
 8002c9a:	d904      	bls.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002ca4:	d904      	bls.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8002ca6:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8002caa:	4893      	ldr	r0, [pc, #588]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 8002cac:	f7fd fd23 	bl	80006f6 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d02e      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d12a      	bne.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d903      	bls.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b07      	cmp	r3, #7
 8002cd2:	d904      	bls.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0xc36>
 8002cd4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002cd8:	4887      	ldr	r0, [pc, #540]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 8002cda:	f7fd fd0c 	bl	80006f6 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002cde:	4b85      	ldr	r3, [pc, #532]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8002ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ce4:	0c1b      	lsrs	r3, r3, #16
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002cec:	4b81      	ldr	r3, [pc, #516]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8002cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cf2:	0e1b      	lsrs	r3, r3, #24
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	019a      	lsls	r2, r3, #6
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	041b      	lsls	r3, r3, #16
 8002d04:	431a      	orrs	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	061b      	lsls	r3, r3, #24
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	071b      	lsls	r3, r3, #28
 8002d12:	4978      	ldr	r1, [pc, #480]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d004      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0xc88>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d2e:	d00a      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d048      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0xd26>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d44:	d143      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d903      	bls.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0xcae>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	2b0f      	cmp	r3, #15
 8002d54:	d904      	bls.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xcb8>
 8002d56:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8002d5a:	4867      	ldr	r0, [pc, #412]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 8002d5c:	f7fd fccb 	bl	80006f6 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	2b20      	cmp	r3, #32
 8002d6e:	d904      	bls.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 8002d70:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8002d74:	4860      	ldr	r0, [pc, #384]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 8002d76:	f7fd fcbe 	bl	80006f6 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d7a:	4b5e      	ldr	r3, [pc, #376]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8002d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d80:	0c1b      	lsrs	r3, r3, #16
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d88:	4b5a      	ldr	r3, [pc, #360]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8002d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d8e:	0f1b      	lsrs	r3, r3, #28
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	019a      	lsls	r2, r3, #6
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	041b      	lsls	r3, r3, #16
 8002da0:	431a      	orrs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	061b      	lsls	r3, r3, #24
 8002da8:	431a      	orrs	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	071b      	lsls	r3, r3, #28
 8002dae:	4951      	ldr	r1, [pc, #324]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002db6:	4b4f      	ldr	r3, [pc, #316]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8002db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dbc:	f023 021f 	bic.w	r2, r3, #31
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	494b      	ldr	r1, [pc, #300]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d032      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0xd98>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d010      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d00c      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d008      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	2b03      	cmp	r3, #3
 8002df8:	d004      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8002dfa:	f240 2105 	movw	r1, #517	; 0x205
 8002dfe:	483e      	ldr	r0, [pc, #248]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 8002e00:	f7fd fc79 	bl	80006f6 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e04:	4b3b      	ldr	r3, [pc, #236]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8002e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e0a:	0e1b      	lsrs	r3, r3, #24
 8002e0c:	f003 030f 	and.w	r3, r3, #15
 8002e10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e12:	4b38      	ldr	r3, [pc, #224]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8002e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e18:	0f1b      	lsrs	r3, r3, #28
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	019a      	lsls	r2, r3, #6
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	041b      	lsls	r3, r3, #16
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	061b      	lsls	r3, r3, #24
 8002e32:	431a      	orrs	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	071b      	lsls	r3, r3, #28
 8002e38:	492e      	ldr	r1, [pc, #184]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d040      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0xe26>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d010      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d00c      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d008      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	d004      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8002e6c:	f44f 7105 	mov.w	r1, #532	; 0x214
 8002e70:	4821      	ldr	r0, [pc, #132]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 8002e72:	f7fd fc40 	bl	80006f6 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d903      	bls.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b07      	cmp	r3, #7
 8002e84:	d904      	bls.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
 8002e86:	f240 2115 	movw	r1, #533	; 0x215
 8002e8a:	481b      	ldr	r0, [pc, #108]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 8002e8c:	f7fd fc33 	bl	80006f6 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d903      	bls.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	2b0f      	cmp	r3, #15
 8002e9e:	d904      	bls.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xe02>
 8002ea0:	f240 2116 	movw	r1, #534	; 0x216
 8002ea4:	4814      	ldr	r0, [pc, #80]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 8002ea6:	f7fd fc26 	bl	80006f6 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	019a      	lsls	r2, r3, #6
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	041b      	lsls	r3, r3, #16
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	061b      	lsls	r3, r3, #24
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	071b      	lsls	r3, r3, #28
 8002ec6:	490b      	ldr	r1, [pc, #44]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a08      	ldr	r2, [pc, #32]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8002ed4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ed8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eda:	f7fd fd81 	bl	80009e0 <HAL_GetTick>
 8002ede:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ee0:	e00c      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ee2:	f7fd fd7d 	bl	80009e0 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b64      	cmp	r3, #100	; 0x64
 8002eee:	d905      	bls.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xe54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e13b      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	08004be8 	.word	0x08004be8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002efc:	4b9d      	ldr	r3, [pc, #628]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0ec      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	f040 812d 	bne.w	800316a <HAL_RCCEx_PeriphCLKConfig+0x10c2>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f10:	4b98      	ldr	r3, [pc, #608]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a97      	ldr	r2, [pc, #604]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8002f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f1c:	f7fd fd60 	bl	80009e0 <HAL_GetTick>
 8002f20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f24:	f7fd fd5c 	bl	80009e0 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b64      	cmp	r3, #100	; 0x64
 8002f30:	d901      	bls.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e11a      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f36:	4b8f      	ldr	r3, [pc, #572]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f42:	d0ef      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	2b31      	cmp	r3, #49	; 0x31
 8002f4a:	d904      	bls.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xeae>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002f54:	d904      	bls.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0xeb8>
 8002f56:	f44f 7111 	mov.w	r1, #580	; 0x244
 8002f5a:	4887      	ldr	r0, [pc, #540]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8002f5c:	f7fd fbcb 	bl	80006f6 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0xecc>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d009      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0xee0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d048      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d144      	bne.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d903      	bls.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xef0>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	2b0f      	cmp	r3, #15
 8002f96:	d904      	bls.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0xefa>
 8002f98:	f240 214b 	movw	r1, #587	; 0x24b
 8002f9c:	4876      	ldr	r0, [pc, #472]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8002f9e:	f7fd fbaa 	bl	80006f6 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0xf0a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fae:	2b20      	cmp	r3, #32
 8002fb0:	d904      	bls.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0xf14>
 8002fb2:	f240 214d 	movw	r1, #589	; 0x24d
 8002fb6:	4870      	ldr	r0, [pc, #448]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8002fb8:	f7fd fb9d 	bl	80006f6 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fbc:	4b6d      	ldr	r3, [pc, #436]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8002fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc2:	0c1b      	lsrs	r3, r3, #16
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fca:	4b6a      	ldr	r3, [pc, #424]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8002fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd0:	0f1b      	lsrs	r3, r3, #28
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	019a      	lsls	r2, r3, #6
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	041b      	lsls	r3, r3, #16
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	061b      	lsls	r3, r3, #24
 8002fea:	431a      	orrs	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	071b      	lsls	r3, r3, #28
 8002ff0:	4960      	ldr	r1, [pc, #384]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002ff8:	4b5e      	ldr	r3, [pc, #376]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8002ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ffe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003006:	3b01      	subs	r3, #1
 8003008:	021b      	lsls	r3, r3, #8
 800300a:	495a      	ldr	r1, [pc, #360]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 800300c:	4313      	orrs	r3, r2
 800300e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d037      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0xfe6>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003022:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003026:	d132      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0xfe6>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d010      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0xfaa>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d00c      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0xfaa>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	2b02      	cmp	r3, #2
 800303e:	d008      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0xfaa>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	2b03      	cmp	r3, #3
 8003046:	d004      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0xfaa>
 8003048:	f44f 7118 	mov.w	r1, #608	; 0x260
 800304c:	484a      	ldr	r0, [pc, #296]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800304e:	f7fd fb52 	bl	80006f6 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003052:	4b48      	ldr	r3, [pc, #288]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8003054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003058:	0e1b      	lsrs	r3, r3, #24
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003060:	4b44      	ldr	r3, [pc, #272]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8003062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003066:	0f1b      	lsrs	r3, r3, #28
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	019a      	lsls	r2, r3, #6
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	041b      	lsls	r3, r3, #16
 800307a:	431a      	orrs	r2, r3
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	061b      	lsls	r3, r3, #24
 8003080:	431a      	orrs	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	071b      	lsls	r3, r3, #28
 8003086:	493b      	ldr	r1, [pc, #236]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d04d      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x108e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d903      	bls.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x1002>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	2b07      	cmp	r3, #7
 80030a8:	d904      	bls.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x100c>
 80030aa:	f240 216f 	movw	r1, #623	; 0x26f
 80030ae:	4832      	ldr	r0, [pc, #200]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80030b0:	f7fd fb21 	bl	80006f6 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d013      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x103c>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c4:	d00e      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x103c>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030ce:	d009      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x103c>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030d8:	d004      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x103c>
 80030da:	f44f 711c 	mov.w	r1, #624	; 0x270
 80030de:	4826      	ldr	r0, [pc, #152]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80030e0:	f7fd fb09 	bl	80006f6 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030e4:	4b23      	ldr	r3, [pc, #140]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 80030e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ea:	0e1b      	lsrs	r3, r3, #24
 80030ec:	f003 030f 	and.w	r3, r3, #15
 80030f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030f2:	4b20      	ldr	r3, [pc, #128]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 80030f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f8:	0c1b      	lsrs	r3, r3, #16
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	019a      	lsls	r2, r3, #6
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	041b      	lsls	r3, r3, #16
 800310a:	431a      	orrs	r2, r3
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	061b      	lsls	r3, r3, #24
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	071b      	lsls	r3, r3, #28
 8003118:	4916      	ldr	r1, [pc, #88]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 800311a:	4313      	orrs	r3, r2
 800311c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003120:	4b14      	ldr	r3, [pc, #80]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8003122:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003126:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312e:	4911      	ldr	r1, [pc, #68]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003136:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a0e      	ldr	r2, [pc, #56]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 800313c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003140:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003142:	f7fd fc4d 	bl	80009e0 <HAL_GetTick>
 8003146:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003148:	e008      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800314a:	f7fd fc49 	bl	80009e0 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b64      	cmp	r3, #100	; 0x64
 8003156:	d901      	bls.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e007      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800315c:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003164:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003168:	d1ef      	bne.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x10a2>
      }
    }
  }
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3720      	adds	r7, #32
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40023800 	.word	0x40023800
 8003178:	08004be8 	.word	0x08004be8

0800317c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e09f      	b.n	80032ce <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d02d      	beq.n	80031f2 <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a4f      	ldr	r2, [pc, #316]	; (80032d8 <HAL_UART_Init+0x15c>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d055      	beq.n	800324c <HAL_UART_Init+0xd0>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a4d      	ldr	r2, [pc, #308]	; (80032dc <HAL_UART_Init+0x160>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d050      	beq.n	800324c <HAL_UART_Init+0xd0>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a4c      	ldr	r2, [pc, #304]	; (80032e0 <HAL_UART_Init+0x164>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d04b      	beq.n	800324c <HAL_UART_Init+0xd0>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a4a      	ldr	r2, [pc, #296]	; (80032e4 <HAL_UART_Init+0x168>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d046      	beq.n	800324c <HAL_UART_Init+0xd0>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a49      	ldr	r2, [pc, #292]	; (80032e8 <HAL_UART_Init+0x16c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d041      	beq.n	800324c <HAL_UART_Init+0xd0>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a47      	ldr	r2, [pc, #284]	; (80032ec <HAL_UART_Init+0x170>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d03c      	beq.n	800324c <HAL_UART_Init+0xd0>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a46      	ldr	r2, [pc, #280]	; (80032f0 <HAL_UART_Init+0x174>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d037      	beq.n	800324c <HAL_UART_Init+0xd0>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a44      	ldr	r2, [pc, #272]	; (80032f4 <HAL_UART_Init+0x178>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d032      	beq.n	800324c <HAL_UART_Init+0xd0>
 80031e6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80031ea:	4843      	ldr	r0, [pc, #268]	; (80032f8 <HAL_UART_Init+0x17c>)
 80031ec:	f7fd fa83 	bl	80006f6 <assert_failed>
 80031f0:	e02c      	b.n	800324c <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a38      	ldr	r2, [pc, #224]	; (80032d8 <HAL_UART_Init+0x15c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d027      	beq.n	800324c <HAL_UART_Init+0xd0>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a36      	ldr	r2, [pc, #216]	; (80032dc <HAL_UART_Init+0x160>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d022      	beq.n	800324c <HAL_UART_Init+0xd0>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a35      	ldr	r2, [pc, #212]	; (80032e0 <HAL_UART_Init+0x164>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d01d      	beq.n	800324c <HAL_UART_Init+0xd0>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a33      	ldr	r2, [pc, #204]	; (80032e4 <HAL_UART_Init+0x168>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d018      	beq.n	800324c <HAL_UART_Init+0xd0>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a32      	ldr	r2, [pc, #200]	; (80032e8 <HAL_UART_Init+0x16c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d013      	beq.n	800324c <HAL_UART_Init+0xd0>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a30      	ldr	r2, [pc, #192]	; (80032ec <HAL_UART_Init+0x170>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d00e      	beq.n	800324c <HAL_UART_Init+0xd0>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a2f      	ldr	r2, [pc, #188]	; (80032f0 <HAL_UART_Init+0x174>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d009      	beq.n	800324c <HAL_UART_Init+0xd0>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a2d      	ldr	r2, [pc, #180]	; (80032f4 <HAL_UART_Init+0x178>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d004      	beq.n	800324c <HAL_UART_Init+0xd0>
 8003242:	f240 1131 	movw	r1, #305	; 0x131
 8003246:	482c      	ldr	r0, [pc, #176]	; (80032f8 <HAL_UART_Init+0x17c>)
 8003248:	f7fd fa55 	bl	80006f6 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003250:	2b00      	cmp	r3, #0
 8003252:	d106      	bne.n	8003262 <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7fd fae5 	bl	800082c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2224      	movs	r2, #36	; 0x24
 8003266:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0201 	bic.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 f99b 	bl	80035b4 <UART_SetConfig>
 800327e:	4603      	mov	r3, r0
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e022      	b.n	80032ce <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	2b00      	cmp	r3, #0
 800328e:	d002      	beq.n	8003296 <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 fc85 	bl	8003ba0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f042 0201 	orr.w	r2, r2, #1
 80032c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 fdc2 	bl	8003e50 <UART_CheckIdleState>
 80032cc:	4603      	mov	r3, r0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40011000 	.word	0x40011000
 80032dc:	40004400 	.word	0x40004400
 80032e0:	40004800 	.word	0x40004800
 80032e4:	40004c00 	.word	0x40004c00
 80032e8:	40005000 	.word	0x40005000
 80032ec:	40011400 	.word	0x40011400
 80032f0:	40007800 	.word	0x40007800
 80032f4:	40007c00 	.word	0x40007c00
 80032f8:	08004c24 	.word	0x08004c24

080032fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08a      	sub	sp, #40	; 0x28
 8003300:	af02      	add	r7, sp, #8
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	603b      	str	r3, [r7, #0]
 8003308:	4613      	mov	r3, r2
 800330a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003310:	2b20      	cmp	r3, #32
 8003312:	d171      	bne.n	80033f8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <HAL_UART_Transmit+0x24>
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e06a      	b.n	80033fa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2221      	movs	r2, #33	; 0x21
 8003330:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003332:	f7fd fb55 	bl	80009e0 <HAL_GetTick>
 8003336:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	88fa      	ldrh	r2, [r7, #6]
 800333c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	88fa      	ldrh	r2, [r7, #6]
 8003344:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003350:	d108      	bne.n	8003364 <HAL_UART_Transmit+0x68>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d104      	bne.n	8003364 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800335a:	2300      	movs	r3, #0
 800335c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	61bb      	str	r3, [r7, #24]
 8003362:	e003      	b.n	800336c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003368:	2300      	movs	r3, #0
 800336a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800336c:	e02c      	b.n	80033c8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2200      	movs	r2, #0
 8003376:	2180      	movs	r1, #128	; 0x80
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 fdb6 	bl	8003eea <UART_WaitOnFlagUntilTimeout>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e038      	b.n	80033fa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10b      	bne.n	80033a6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800339c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	3302      	adds	r3, #2
 80033a2:	61bb      	str	r3, [r7, #24]
 80033a4:	e007      	b.n	80033b6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	781a      	ldrb	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	3301      	adds	r3, #1
 80033b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1cc      	bne.n	800336e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	2200      	movs	r2, #0
 80033dc:	2140      	movs	r1, #64	; 0x40
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 fd83 	bl	8003eea <UART_WaitOnFlagUntilTimeout>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e005      	b.n	80033fa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2220      	movs	r2, #32
 80033f2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80033f4:	2300      	movs	r3, #0
 80033f6:	e000      	b.n	80033fa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80033f8:	2302      	movs	r3, #2
  }
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3720      	adds	r7, #32
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b08a      	sub	sp, #40	; 0x28
 8003406:	af02      	add	r7, sp, #8
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	603b      	str	r3, [r7, #0]
 800340e:	4613      	mov	r3, r2
 8003410:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003418:	2b20      	cmp	r3, #32
 800341a:	f040 80b1 	bne.w	8003580 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d002      	beq.n	800342a <HAL_UART_Receive+0x28>
 8003424:	88fb      	ldrh	r3, [r7, #6]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e0a9      	b.n	8003582 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2222      	movs	r2, #34	; 0x22
 800343a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003444:	f7fd facc 	bl	80009e0 <HAL_GetTick>
 8003448:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	88fa      	ldrh	r2, [r7, #6]
 800344e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	88fa      	ldrh	r2, [r7, #6]
 8003456:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003462:	d10e      	bne.n	8003482 <HAL_UART_Receive+0x80>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d105      	bne.n	8003478 <HAL_UART_Receive+0x76>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003472:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003476:	e02d      	b.n	80034d4 <HAL_UART_Receive+0xd2>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	22ff      	movs	r2, #255	; 0xff
 800347c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003480:	e028      	b.n	80034d4 <HAL_UART_Receive+0xd2>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10d      	bne.n	80034a6 <HAL_UART_Receive+0xa4>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d104      	bne.n	800349c <HAL_UART_Receive+0x9a>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	22ff      	movs	r2, #255	; 0xff
 8003496:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800349a:	e01b      	b.n	80034d4 <HAL_UART_Receive+0xd2>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	227f      	movs	r2, #127	; 0x7f
 80034a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034a4:	e016      	b.n	80034d4 <HAL_UART_Receive+0xd2>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034ae:	d10d      	bne.n	80034cc <HAL_UART_Receive+0xca>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d104      	bne.n	80034c2 <HAL_UART_Receive+0xc0>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	227f      	movs	r2, #127	; 0x7f
 80034bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034c0:	e008      	b.n	80034d4 <HAL_UART_Receive+0xd2>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	223f      	movs	r2, #63	; 0x3f
 80034c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034ca:	e003      	b.n	80034d4 <HAL_UART_Receive+0xd2>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80034da:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e4:	d108      	bne.n	80034f8 <HAL_UART_Receive+0xf6>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d104      	bne.n	80034f8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80034ee:	2300      	movs	r3, #0
 80034f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	61bb      	str	r3, [r7, #24]
 80034f6:	e003      	b.n	8003500 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034fc:	2300      	movs	r3, #0
 80034fe:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003500:	e032      	b.n	8003568 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2200      	movs	r2, #0
 800350a:	2120      	movs	r1, #32
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 fcec 	bl	8003eea <UART_WaitOnFlagUntilTimeout>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e032      	b.n	8003582 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10c      	bne.n	800353c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	b29a      	uxth	r2, r3
 800352a:	8a7b      	ldrh	r3, [r7, #18]
 800352c:	4013      	ands	r3, r2
 800352e:	b29a      	uxth	r2, r3
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	3302      	adds	r3, #2
 8003538:	61bb      	str	r3, [r7, #24]
 800353a:	e00c      	b.n	8003556 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	b2da      	uxtb	r2, r3
 8003544:	8a7b      	ldrh	r3, [r7, #18]
 8003546:	b2db      	uxtb	r3, r3
 8003548:	4013      	ands	r3, r2
 800354a:	b2da      	uxtb	r2, r3
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	3301      	adds	r3, #1
 8003554:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800355c:	b29b      	uxth	r3, r3
 800355e:	3b01      	subs	r3, #1
 8003560:	b29a      	uxth	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800356e:	b29b      	uxth	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1c6      	bne.n	8003502 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2220      	movs	r2, #32
 8003578:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800357c:	2300      	movs	r3, #0
 800357e:	e000      	b.n	8003582 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8003580:	2302      	movs	r3, #2
  }
}
 8003582:	4618      	mov	r0, r3
 8003584:	3720      	adds	r7, #32
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800358a:	b480      	push	{r7}
 800358c:	b085      	sub	sp, #20
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003596:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800359e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	4313      	orrs	r3, r2
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
	...

080035b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b088      	sub	sp, #32
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	4aa0      	ldr	r2, [pc, #640]	; (8003848 <UART_SetConfig+0x294>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d904      	bls.n	80035d4 <UART_SetConfig+0x20>
 80035ca:	f640 315d 	movw	r1, #2909	; 0xb5d
 80035ce:	489f      	ldr	r0, [pc, #636]	; (800384c <UART_SetConfig+0x298>)
 80035d0:	f7fd f891 	bl	80006f6 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035dc:	d00d      	beq.n	80035fa <UART_SetConfig+0x46>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <UART_SetConfig+0x46>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ee:	d004      	beq.n	80035fa <UART_SetConfig+0x46>
 80035f0:	f640 315e 	movw	r1, #2910	; 0xb5e
 80035f4:	4895      	ldr	r0, [pc, #596]	; (800384c <UART_SetConfig+0x298>)
 80035f6:	f7fd f87e 	bl	80006f6 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003602:	d012      	beq.n	800362a <UART_SetConfig+0x76>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00e      	beq.n	800362a <UART_SetConfig+0x76>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003614:	d009      	beq.n	800362a <UART_SetConfig+0x76>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800361e:	d004      	beq.n	800362a <UART_SetConfig+0x76>
 8003620:	f640 315f 	movw	r1, #2911	; 0xb5f
 8003624:	4889      	ldr	r0, [pc, #548]	; (800384c <UART_SetConfig+0x298>)
 8003626:	f7fd f866 	bl	80006f6 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d009      	beq.n	8003646 <UART_SetConfig+0x92>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800363a:	d004      	beq.n	8003646 <UART_SetConfig+0x92>
 800363c:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 8003640:	4882      	ldr	r0, [pc, #520]	; (800384c <UART_SetConfig+0x298>)
 8003642:	f7fd f858 	bl	80006f6 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00e      	beq.n	800366c <UART_SetConfig+0xb8>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003656:	d009      	beq.n	800366c <UART_SetConfig+0xb8>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003660:	d004      	beq.n	800366c <UART_SetConfig+0xb8>
 8003662:	f640 3162 	movw	r1, #2914	; 0xb62
 8003666:	4879      	ldr	r0, [pc, #484]	; (800384c <UART_SetConfig+0x298>)
 8003668:	f7fd f845 	bl	80006f6 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	f023 030c 	bic.w	r3, r3, #12
 8003674:	2b00      	cmp	r3, #0
 8003676:	d103      	bne.n	8003680 <UART_SetConfig+0xcc>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d104      	bne.n	800368a <UART_SetConfig+0xd6>
 8003680:	f640 3163 	movw	r1, #2915	; 0xb63
 8003684:	4871      	ldr	r0, [pc, #452]	; (800384c <UART_SetConfig+0x298>)
 8003686:	f7fd f836 	bl	80006f6 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d013      	beq.n	80036ba <UART_SetConfig+0x106>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800369a:	d00e      	beq.n	80036ba <UART_SetConfig+0x106>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036a4:	d009      	beq.n	80036ba <UART_SetConfig+0x106>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ae:	d004      	beq.n	80036ba <UART_SetConfig+0x106>
 80036b0:	f640 3164 	movw	r1, #2916	; 0xb64
 80036b4:	4865      	ldr	r0, [pc, #404]	; (800384c <UART_SetConfig+0x298>)
 80036b6:	f7fd f81e 	bl	80006f6 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d009      	beq.n	80036d6 <UART_SetConfig+0x122>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ca:	d004      	beq.n	80036d6 <UART_SetConfig+0x122>
 80036cc:	f640 3165 	movw	r1, #2917	; 0xb65
 80036d0:	485e      	ldr	r0, [pc, #376]	; (800384c <UART_SetConfig+0x298>)
 80036d2:	f7fd f810 	bl	80006f6 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	431a      	orrs	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	4b56      	ldr	r3, [pc, #344]	; (8003850 <UART_SetConfig+0x29c>)
 80036f6:	4013      	ands	r3, r2
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	6979      	ldr	r1, [r7, #20]
 80036fe:	430b      	orrs	r3, r1
 8003700:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	4313      	orrs	r3, r2
 8003726:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	430a      	orrs	r2, r1
 800373a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a44      	ldr	r2, [pc, #272]	; (8003854 <UART_SetConfig+0x2a0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d121      	bne.n	800378a <UART_SetConfig+0x1d6>
 8003746:	4b44      	ldr	r3, [pc, #272]	; (8003858 <UART_SetConfig+0x2a4>)
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	2b03      	cmp	r3, #3
 8003752:	d817      	bhi.n	8003784 <UART_SetConfig+0x1d0>
 8003754:	a201      	add	r2, pc, #4	; (adr r2, 800375c <UART_SetConfig+0x1a8>)
 8003756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375a:	bf00      	nop
 800375c:	0800376d 	.word	0x0800376d
 8003760:	08003779 	.word	0x08003779
 8003764:	08003773 	.word	0x08003773
 8003768:	0800377f 	.word	0x0800377f
 800376c:	2301      	movs	r3, #1
 800376e:	77fb      	strb	r3, [r7, #31]
 8003770:	e14c      	b.n	8003a0c <UART_SetConfig+0x458>
 8003772:	2302      	movs	r3, #2
 8003774:	77fb      	strb	r3, [r7, #31]
 8003776:	e149      	b.n	8003a0c <UART_SetConfig+0x458>
 8003778:	2304      	movs	r3, #4
 800377a:	77fb      	strb	r3, [r7, #31]
 800377c:	e146      	b.n	8003a0c <UART_SetConfig+0x458>
 800377e:	2308      	movs	r3, #8
 8003780:	77fb      	strb	r3, [r7, #31]
 8003782:	e143      	b.n	8003a0c <UART_SetConfig+0x458>
 8003784:	2310      	movs	r3, #16
 8003786:	77fb      	strb	r3, [r7, #31]
 8003788:	e140      	b.n	8003a0c <UART_SetConfig+0x458>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a33      	ldr	r2, [pc, #204]	; (800385c <UART_SetConfig+0x2a8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d132      	bne.n	80037fa <UART_SetConfig+0x246>
 8003794:	4b30      	ldr	r3, [pc, #192]	; (8003858 <UART_SetConfig+0x2a4>)
 8003796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379a:	f003 030c 	and.w	r3, r3, #12
 800379e:	2b0c      	cmp	r3, #12
 80037a0:	d828      	bhi.n	80037f4 <UART_SetConfig+0x240>
 80037a2:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <UART_SetConfig+0x1f4>)
 80037a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a8:	080037dd 	.word	0x080037dd
 80037ac:	080037f5 	.word	0x080037f5
 80037b0:	080037f5 	.word	0x080037f5
 80037b4:	080037f5 	.word	0x080037f5
 80037b8:	080037e9 	.word	0x080037e9
 80037bc:	080037f5 	.word	0x080037f5
 80037c0:	080037f5 	.word	0x080037f5
 80037c4:	080037f5 	.word	0x080037f5
 80037c8:	080037e3 	.word	0x080037e3
 80037cc:	080037f5 	.word	0x080037f5
 80037d0:	080037f5 	.word	0x080037f5
 80037d4:	080037f5 	.word	0x080037f5
 80037d8:	080037ef 	.word	0x080037ef
 80037dc:	2300      	movs	r3, #0
 80037de:	77fb      	strb	r3, [r7, #31]
 80037e0:	e114      	b.n	8003a0c <UART_SetConfig+0x458>
 80037e2:	2302      	movs	r3, #2
 80037e4:	77fb      	strb	r3, [r7, #31]
 80037e6:	e111      	b.n	8003a0c <UART_SetConfig+0x458>
 80037e8:	2304      	movs	r3, #4
 80037ea:	77fb      	strb	r3, [r7, #31]
 80037ec:	e10e      	b.n	8003a0c <UART_SetConfig+0x458>
 80037ee:	2308      	movs	r3, #8
 80037f0:	77fb      	strb	r3, [r7, #31]
 80037f2:	e10b      	b.n	8003a0c <UART_SetConfig+0x458>
 80037f4:	2310      	movs	r3, #16
 80037f6:	77fb      	strb	r3, [r7, #31]
 80037f8:	e108      	b.n	8003a0c <UART_SetConfig+0x458>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a18      	ldr	r2, [pc, #96]	; (8003860 <UART_SetConfig+0x2ac>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d12f      	bne.n	8003864 <UART_SetConfig+0x2b0>
 8003804:	4b14      	ldr	r3, [pc, #80]	; (8003858 <UART_SetConfig+0x2a4>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800380e:	2b30      	cmp	r3, #48	; 0x30
 8003810:	d013      	beq.n	800383a <UART_SetConfig+0x286>
 8003812:	2b30      	cmp	r3, #48	; 0x30
 8003814:	d814      	bhi.n	8003840 <UART_SetConfig+0x28c>
 8003816:	2b20      	cmp	r3, #32
 8003818:	d009      	beq.n	800382e <UART_SetConfig+0x27a>
 800381a:	2b20      	cmp	r3, #32
 800381c:	d810      	bhi.n	8003840 <UART_SetConfig+0x28c>
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <UART_SetConfig+0x274>
 8003822:	2b10      	cmp	r3, #16
 8003824:	d006      	beq.n	8003834 <UART_SetConfig+0x280>
 8003826:	e00b      	b.n	8003840 <UART_SetConfig+0x28c>
 8003828:	2300      	movs	r3, #0
 800382a:	77fb      	strb	r3, [r7, #31]
 800382c:	e0ee      	b.n	8003a0c <UART_SetConfig+0x458>
 800382e:	2302      	movs	r3, #2
 8003830:	77fb      	strb	r3, [r7, #31]
 8003832:	e0eb      	b.n	8003a0c <UART_SetConfig+0x458>
 8003834:	2304      	movs	r3, #4
 8003836:	77fb      	strb	r3, [r7, #31]
 8003838:	e0e8      	b.n	8003a0c <UART_SetConfig+0x458>
 800383a:	2308      	movs	r3, #8
 800383c:	77fb      	strb	r3, [r7, #31]
 800383e:	e0e5      	b.n	8003a0c <UART_SetConfig+0x458>
 8003840:	2310      	movs	r3, #16
 8003842:	77fb      	strb	r3, [r7, #31]
 8003844:	e0e2      	b.n	8003a0c <UART_SetConfig+0x458>
 8003846:	bf00      	nop
 8003848:	019bfcc0 	.word	0x019bfcc0
 800384c:	08004c24 	.word	0x08004c24
 8003850:	efff69f3 	.word	0xefff69f3
 8003854:	40011000 	.word	0x40011000
 8003858:	40023800 	.word	0x40023800
 800385c:	40004400 	.word	0x40004400
 8003860:	40004800 	.word	0x40004800
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4aa5      	ldr	r2, [pc, #660]	; (8003b00 <UART_SetConfig+0x54c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d120      	bne.n	80038b0 <UART_SetConfig+0x2fc>
 800386e:	4ba5      	ldr	r3, [pc, #660]	; (8003b04 <UART_SetConfig+0x550>)
 8003870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003874:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003878:	2bc0      	cmp	r3, #192	; 0xc0
 800387a:	d013      	beq.n	80038a4 <UART_SetConfig+0x2f0>
 800387c:	2bc0      	cmp	r3, #192	; 0xc0
 800387e:	d814      	bhi.n	80038aa <UART_SetConfig+0x2f6>
 8003880:	2b80      	cmp	r3, #128	; 0x80
 8003882:	d009      	beq.n	8003898 <UART_SetConfig+0x2e4>
 8003884:	2b80      	cmp	r3, #128	; 0x80
 8003886:	d810      	bhi.n	80038aa <UART_SetConfig+0x2f6>
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <UART_SetConfig+0x2de>
 800388c:	2b40      	cmp	r3, #64	; 0x40
 800388e:	d006      	beq.n	800389e <UART_SetConfig+0x2ea>
 8003890:	e00b      	b.n	80038aa <UART_SetConfig+0x2f6>
 8003892:	2300      	movs	r3, #0
 8003894:	77fb      	strb	r3, [r7, #31]
 8003896:	e0b9      	b.n	8003a0c <UART_SetConfig+0x458>
 8003898:	2302      	movs	r3, #2
 800389a:	77fb      	strb	r3, [r7, #31]
 800389c:	e0b6      	b.n	8003a0c <UART_SetConfig+0x458>
 800389e:	2304      	movs	r3, #4
 80038a0:	77fb      	strb	r3, [r7, #31]
 80038a2:	e0b3      	b.n	8003a0c <UART_SetConfig+0x458>
 80038a4:	2308      	movs	r3, #8
 80038a6:	77fb      	strb	r3, [r7, #31]
 80038a8:	e0b0      	b.n	8003a0c <UART_SetConfig+0x458>
 80038aa:	2310      	movs	r3, #16
 80038ac:	77fb      	strb	r3, [r7, #31]
 80038ae:	e0ad      	b.n	8003a0c <UART_SetConfig+0x458>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a94      	ldr	r2, [pc, #592]	; (8003b08 <UART_SetConfig+0x554>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d125      	bne.n	8003906 <UART_SetConfig+0x352>
 80038ba:	4b92      	ldr	r3, [pc, #584]	; (8003b04 <UART_SetConfig+0x550>)
 80038bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038c8:	d017      	beq.n	80038fa <UART_SetConfig+0x346>
 80038ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038ce:	d817      	bhi.n	8003900 <UART_SetConfig+0x34c>
 80038d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038d4:	d00b      	beq.n	80038ee <UART_SetConfig+0x33a>
 80038d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038da:	d811      	bhi.n	8003900 <UART_SetConfig+0x34c>
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d003      	beq.n	80038e8 <UART_SetConfig+0x334>
 80038e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038e4:	d006      	beq.n	80038f4 <UART_SetConfig+0x340>
 80038e6:	e00b      	b.n	8003900 <UART_SetConfig+0x34c>
 80038e8:	2300      	movs	r3, #0
 80038ea:	77fb      	strb	r3, [r7, #31]
 80038ec:	e08e      	b.n	8003a0c <UART_SetConfig+0x458>
 80038ee:	2302      	movs	r3, #2
 80038f0:	77fb      	strb	r3, [r7, #31]
 80038f2:	e08b      	b.n	8003a0c <UART_SetConfig+0x458>
 80038f4:	2304      	movs	r3, #4
 80038f6:	77fb      	strb	r3, [r7, #31]
 80038f8:	e088      	b.n	8003a0c <UART_SetConfig+0x458>
 80038fa:	2308      	movs	r3, #8
 80038fc:	77fb      	strb	r3, [r7, #31]
 80038fe:	e085      	b.n	8003a0c <UART_SetConfig+0x458>
 8003900:	2310      	movs	r3, #16
 8003902:	77fb      	strb	r3, [r7, #31]
 8003904:	e082      	b.n	8003a0c <UART_SetConfig+0x458>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a80      	ldr	r2, [pc, #512]	; (8003b0c <UART_SetConfig+0x558>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d125      	bne.n	800395c <UART_SetConfig+0x3a8>
 8003910:	4b7c      	ldr	r3, [pc, #496]	; (8003b04 <UART_SetConfig+0x550>)
 8003912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003916:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800391a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800391e:	d017      	beq.n	8003950 <UART_SetConfig+0x39c>
 8003920:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003924:	d817      	bhi.n	8003956 <UART_SetConfig+0x3a2>
 8003926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800392a:	d00b      	beq.n	8003944 <UART_SetConfig+0x390>
 800392c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003930:	d811      	bhi.n	8003956 <UART_SetConfig+0x3a2>
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <UART_SetConfig+0x38a>
 8003936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800393a:	d006      	beq.n	800394a <UART_SetConfig+0x396>
 800393c:	e00b      	b.n	8003956 <UART_SetConfig+0x3a2>
 800393e:	2301      	movs	r3, #1
 8003940:	77fb      	strb	r3, [r7, #31]
 8003942:	e063      	b.n	8003a0c <UART_SetConfig+0x458>
 8003944:	2302      	movs	r3, #2
 8003946:	77fb      	strb	r3, [r7, #31]
 8003948:	e060      	b.n	8003a0c <UART_SetConfig+0x458>
 800394a:	2304      	movs	r3, #4
 800394c:	77fb      	strb	r3, [r7, #31]
 800394e:	e05d      	b.n	8003a0c <UART_SetConfig+0x458>
 8003950:	2308      	movs	r3, #8
 8003952:	77fb      	strb	r3, [r7, #31]
 8003954:	e05a      	b.n	8003a0c <UART_SetConfig+0x458>
 8003956:	2310      	movs	r3, #16
 8003958:	77fb      	strb	r3, [r7, #31]
 800395a:	e057      	b.n	8003a0c <UART_SetConfig+0x458>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a6b      	ldr	r2, [pc, #428]	; (8003b10 <UART_SetConfig+0x55c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d125      	bne.n	80039b2 <UART_SetConfig+0x3fe>
 8003966:	4b67      	ldr	r3, [pc, #412]	; (8003b04 <UART_SetConfig+0x550>)
 8003968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003970:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003974:	d017      	beq.n	80039a6 <UART_SetConfig+0x3f2>
 8003976:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800397a:	d817      	bhi.n	80039ac <UART_SetConfig+0x3f8>
 800397c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003980:	d00b      	beq.n	800399a <UART_SetConfig+0x3e6>
 8003982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003986:	d811      	bhi.n	80039ac <UART_SetConfig+0x3f8>
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <UART_SetConfig+0x3e0>
 800398c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003990:	d006      	beq.n	80039a0 <UART_SetConfig+0x3ec>
 8003992:	e00b      	b.n	80039ac <UART_SetConfig+0x3f8>
 8003994:	2300      	movs	r3, #0
 8003996:	77fb      	strb	r3, [r7, #31]
 8003998:	e038      	b.n	8003a0c <UART_SetConfig+0x458>
 800399a:	2302      	movs	r3, #2
 800399c:	77fb      	strb	r3, [r7, #31]
 800399e:	e035      	b.n	8003a0c <UART_SetConfig+0x458>
 80039a0:	2304      	movs	r3, #4
 80039a2:	77fb      	strb	r3, [r7, #31]
 80039a4:	e032      	b.n	8003a0c <UART_SetConfig+0x458>
 80039a6:	2308      	movs	r3, #8
 80039a8:	77fb      	strb	r3, [r7, #31]
 80039aa:	e02f      	b.n	8003a0c <UART_SetConfig+0x458>
 80039ac:	2310      	movs	r3, #16
 80039ae:	77fb      	strb	r3, [r7, #31]
 80039b0:	e02c      	b.n	8003a0c <UART_SetConfig+0x458>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a57      	ldr	r2, [pc, #348]	; (8003b14 <UART_SetConfig+0x560>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d125      	bne.n	8003a08 <UART_SetConfig+0x454>
 80039bc:	4b51      	ldr	r3, [pc, #324]	; (8003b04 <UART_SetConfig+0x550>)
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80039c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80039ca:	d017      	beq.n	80039fc <UART_SetConfig+0x448>
 80039cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80039d0:	d817      	bhi.n	8003a02 <UART_SetConfig+0x44e>
 80039d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d6:	d00b      	beq.n	80039f0 <UART_SetConfig+0x43c>
 80039d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039dc:	d811      	bhi.n	8003a02 <UART_SetConfig+0x44e>
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <UART_SetConfig+0x436>
 80039e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039e6:	d006      	beq.n	80039f6 <UART_SetConfig+0x442>
 80039e8:	e00b      	b.n	8003a02 <UART_SetConfig+0x44e>
 80039ea:	2300      	movs	r3, #0
 80039ec:	77fb      	strb	r3, [r7, #31]
 80039ee:	e00d      	b.n	8003a0c <UART_SetConfig+0x458>
 80039f0:	2302      	movs	r3, #2
 80039f2:	77fb      	strb	r3, [r7, #31]
 80039f4:	e00a      	b.n	8003a0c <UART_SetConfig+0x458>
 80039f6:	2304      	movs	r3, #4
 80039f8:	77fb      	strb	r3, [r7, #31]
 80039fa:	e007      	b.n	8003a0c <UART_SetConfig+0x458>
 80039fc:	2308      	movs	r3, #8
 80039fe:	77fb      	strb	r3, [r7, #31]
 8003a00:	e004      	b.n	8003a0c <UART_SetConfig+0x458>
 8003a02:	2310      	movs	r3, #16
 8003a04:	77fb      	strb	r3, [r7, #31]
 8003a06:	e001      	b.n	8003a0c <UART_SetConfig+0x458>
 8003a08:	2310      	movs	r3, #16
 8003a0a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a14:	d15c      	bne.n	8003ad0 <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 8003a16:	7ffb      	ldrb	r3, [r7, #31]
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d828      	bhi.n	8003a6e <UART_SetConfig+0x4ba>
 8003a1c:	a201      	add	r2, pc, #4	; (adr r2, 8003a24 <UART_SetConfig+0x470>)
 8003a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a22:	bf00      	nop
 8003a24:	08003a49 	.word	0x08003a49
 8003a28:	08003a51 	.word	0x08003a51
 8003a2c:	08003a59 	.word	0x08003a59
 8003a30:	08003a6f 	.word	0x08003a6f
 8003a34:	08003a5f 	.word	0x08003a5f
 8003a38:	08003a6f 	.word	0x08003a6f
 8003a3c:	08003a6f 	.word	0x08003a6f
 8003a40:	08003a6f 	.word	0x08003a6f
 8003a44:	08003a67 	.word	0x08003a67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a48:	f7fe fb06 	bl	8002058 <HAL_RCC_GetPCLK1Freq>
 8003a4c:	61b8      	str	r0, [r7, #24]
        break;
 8003a4e:	e013      	b.n	8003a78 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a50:	f7fe fb16 	bl	8002080 <HAL_RCC_GetPCLK2Freq>
 8003a54:	61b8      	str	r0, [r7, #24]
        break;
 8003a56:	e00f      	b.n	8003a78 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a58:	4b2f      	ldr	r3, [pc, #188]	; (8003b18 <UART_SetConfig+0x564>)
 8003a5a:	61bb      	str	r3, [r7, #24]
        break;
 8003a5c:	e00c      	b.n	8003a78 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a5e:	f7fe f9e9 	bl	8001e34 <HAL_RCC_GetSysClockFreq>
 8003a62:	61b8      	str	r0, [r7, #24]
        break;
 8003a64:	e008      	b.n	8003a78 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a6a:	61bb      	str	r3, [r7, #24]
        break;
 8003a6c:	e004      	b.n	8003a78 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	77bb      	strb	r3, [r7, #30]
        break;
 8003a76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 8082 	beq.w	8003b84 <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	005a      	lsls	r2, r3, #1
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	085b      	lsrs	r3, r3, #1
 8003a8a:	441a      	add	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	2b0f      	cmp	r3, #15
 8003a9a:	d916      	bls.n	8003aca <UART_SetConfig+0x516>
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa2:	d212      	bcs.n	8003aca <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	f023 030f 	bic.w	r3, r3, #15
 8003aac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	085b      	lsrs	r3, r3, #1
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	89fb      	ldrh	r3, [r7, #14]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	89fa      	ldrh	r2, [r7, #14]
 8003ac6:	60da      	str	r2, [r3, #12]
 8003ac8:	e05c      	b.n	8003b84 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	77bb      	strb	r3, [r7, #30]
 8003ace:	e059      	b.n	8003b84 <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ad0:	7ffb      	ldrb	r3, [r7, #31]
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d835      	bhi.n	8003b42 <UART_SetConfig+0x58e>
 8003ad6:	a201      	add	r2, pc, #4	; (adr r2, 8003adc <UART_SetConfig+0x528>)
 8003ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003adc:	08003b1d 	.word	0x08003b1d
 8003ae0:	08003b25 	.word	0x08003b25
 8003ae4:	08003b2d 	.word	0x08003b2d
 8003ae8:	08003b43 	.word	0x08003b43
 8003aec:	08003b33 	.word	0x08003b33
 8003af0:	08003b43 	.word	0x08003b43
 8003af4:	08003b43 	.word	0x08003b43
 8003af8:	08003b43 	.word	0x08003b43
 8003afc:	08003b3b 	.word	0x08003b3b
 8003b00:	40004c00 	.word	0x40004c00
 8003b04:	40023800 	.word	0x40023800
 8003b08:	40005000 	.word	0x40005000
 8003b0c:	40011400 	.word	0x40011400
 8003b10:	40007800 	.word	0x40007800
 8003b14:	40007c00 	.word	0x40007c00
 8003b18:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b1c:	f7fe fa9c 	bl	8002058 <HAL_RCC_GetPCLK1Freq>
 8003b20:	61b8      	str	r0, [r7, #24]
        break;
 8003b22:	e013      	b.n	8003b4c <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b24:	f7fe faac 	bl	8002080 <HAL_RCC_GetPCLK2Freq>
 8003b28:	61b8      	str	r0, [r7, #24]
        break;
 8003b2a:	e00f      	b.n	8003b4c <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b2c:	4b1b      	ldr	r3, [pc, #108]	; (8003b9c <UART_SetConfig+0x5e8>)
 8003b2e:	61bb      	str	r3, [r7, #24]
        break;
 8003b30:	e00c      	b.n	8003b4c <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b32:	f7fe f97f 	bl	8001e34 <HAL_RCC_GetSysClockFreq>
 8003b36:	61b8      	str	r0, [r7, #24]
        break;
 8003b38:	e008      	b.n	8003b4c <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b3e:	61bb      	str	r3, [r7, #24]
        break;
 8003b40:	e004      	b.n	8003b4c <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	77bb      	strb	r3, [r7, #30]
        break;
 8003b4a:	bf00      	nop
    }

    if (pclk != 0U)
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d018      	beq.n	8003b84 <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	085a      	lsrs	r2, r3, #1
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	441a      	add	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	2b0f      	cmp	r3, #15
 8003b6a:	d909      	bls.n	8003b80 <UART_SetConfig+0x5cc>
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b72:	d205      	bcs.n	8003b80 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	60da      	str	r2, [r3, #12]
 8003b7e:	e001      	b.n	8003b84 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003b90:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3720      	adds	r7, #32
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	00f42400 	.word	0x00f42400

08003ba0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	2bff      	cmp	r3, #255	; 0xff
 8003bae:	d904      	bls.n	8003bba <UART_AdvFeatureConfig+0x1a>
 8003bb0:	f640 31e6 	movw	r1, #3046	; 0xbe6
 8003bb4:	488e      	ldr	r0, [pc, #568]	; (8003df0 <UART_AdvFeatureConfig+0x250>)
 8003bb6:	f7fc fd9e 	bl	80006f6 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d018      	beq.n	8003bf8 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d009      	beq.n	8003be2 <UART_AdvFeatureConfig+0x42>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bd6:	d004      	beq.n	8003be2 <UART_AdvFeatureConfig+0x42>
 8003bd8:	f640 31eb 	movw	r1, #3051	; 0xbeb
 8003bdc:	4884      	ldr	r0, [pc, #528]	; (8003df0 <UART_AdvFeatureConfig+0x250>)
 8003bde:	f7fc fd8a 	bl	80006f6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d018      	beq.n	8003c36 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d009      	beq.n	8003c20 <UART_AdvFeatureConfig+0x80>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c14:	d004      	beq.n	8003c20 <UART_AdvFeatureConfig+0x80>
 8003c16:	f640 31f2 	movw	r1, #3058	; 0xbf2
 8003c1a:	4875      	ldr	r0, [pc, #468]	; (8003df0 <UART_AdvFeatureConfig+0x250>)
 8003c1c:	f7fc fd6b 	bl	80006f6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	f003 0304 	and.w	r3, r3, #4
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d018      	beq.n	8003c74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d009      	beq.n	8003c5e <UART_AdvFeatureConfig+0xbe>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c52:	d004      	beq.n	8003c5e <UART_AdvFeatureConfig+0xbe>
 8003c54:	f640 31f9 	movw	r1, #3065	; 0xbf9
 8003c58:	4865      	ldr	r0, [pc, #404]	; (8003df0 <UART_AdvFeatureConfig+0x250>)
 8003c5a:	f7fc fd4c 	bl	80006f6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d018      	beq.n	8003cb2 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d009      	beq.n	8003c9c <UART_AdvFeatureConfig+0xfc>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c90:	d004      	beq.n	8003c9c <UART_AdvFeatureConfig+0xfc>
 8003c92:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003c96:	4856      	ldr	r0, [pc, #344]	; (8003df0 <UART_AdvFeatureConfig+0x250>)
 8003c98:	f7fc fd2d 	bl	80006f6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	f003 0310 	and.w	r3, r3, #16
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d018      	beq.n	8003cf0 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d009      	beq.n	8003cda <UART_AdvFeatureConfig+0x13a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cce:	d004      	beq.n	8003cda <UART_AdvFeatureConfig+0x13a>
 8003cd0:	f640 4107 	movw	r1, #3079	; 0xc07
 8003cd4:	4846      	ldr	r0, [pc, #280]	; (8003df0 <UART_AdvFeatureConfig+0x250>)
 8003cd6:	f7fc fd0e 	bl	80006f6 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	f003 0320 	and.w	r3, r3, #32
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d018      	beq.n	8003d2e <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d009      	beq.n	8003d18 <UART_AdvFeatureConfig+0x178>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d0c:	d004      	beq.n	8003d18 <UART_AdvFeatureConfig+0x178>
 8003d0e:	f640 410e 	movw	r1, #3086	; 0xc0e
 8003d12:	4837      	ldr	r0, [pc, #220]	; (8003df0 <UART_AdvFeatureConfig+0x250>)
 8003d14:	f7fc fcef 	bl	80006f6 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d064      	beq.n	8003e04 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a2d      	ldr	r2, [pc, #180]	; (8003df4 <UART_AdvFeatureConfig+0x254>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d013      	beq.n	8003d6c <UART_AdvFeatureConfig+0x1cc>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a2b      	ldr	r2, [pc, #172]	; (8003df8 <UART_AdvFeatureConfig+0x258>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d00e      	beq.n	8003d6c <UART_AdvFeatureConfig+0x1cc>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a2a      	ldr	r2, [pc, #168]	; (8003dfc <UART_AdvFeatureConfig+0x25c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d009      	beq.n	8003d6c <UART_AdvFeatureConfig+0x1cc>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a28      	ldr	r2, [pc, #160]	; (8003e00 <UART_AdvFeatureConfig+0x260>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d004      	beq.n	8003d6c <UART_AdvFeatureConfig+0x1cc>
 8003d62:	f640 4115 	movw	r1, #3093	; 0xc15
 8003d66:	4822      	ldr	r0, [pc, #136]	; (8003df0 <UART_AdvFeatureConfig+0x250>)
 8003d68:	f7fc fcc5 	bl	80006f6 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d009      	beq.n	8003d88 <UART_AdvFeatureConfig+0x1e8>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d7c:	d004      	beq.n	8003d88 <UART_AdvFeatureConfig+0x1e8>
 8003d7e:	f640 4116 	movw	r1, #3094	; 0xc16
 8003d82:	481b      	ldr	r0, [pc, #108]	; (8003df0 <UART_AdvFeatureConfig+0x250>)
 8003d84:	f7fc fcb7 	bl	80006f6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003da6:	d12d      	bne.n	8003e04 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d013      	beq.n	8003dd8 <UART_AdvFeatureConfig+0x238>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003db8:	d00e      	beq.n	8003dd8 <UART_AdvFeatureConfig+0x238>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dc2:	d009      	beq.n	8003dd8 <UART_AdvFeatureConfig+0x238>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003dcc:	d004      	beq.n	8003dd8 <UART_AdvFeatureConfig+0x238>
 8003dce:	f640 411b 	movw	r1, #3099	; 0xc1b
 8003dd2:	4807      	ldr	r0, [pc, #28]	; (8003df0 <UART_AdvFeatureConfig+0x250>)
 8003dd4:	f7fc fc8f 	bl	80006f6 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	605a      	str	r2, [r3, #4]
 8003dee:	e009      	b.n	8003e04 <UART_AdvFeatureConfig+0x264>
 8003df0:	08004c24 	.word	0x08004c24
 8003df4:	40011000 	.word	0x40011000
 8003df8:	40004400 	.word	0x40004400
 8003dfc:	40004800 	.word	0x40004800
 8003e00:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d018      	beq.n	8003e42 <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d009      	beq.n	8003e2c <UART_AdvFeatureConfig+0x28c>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e1c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e20:	d004      	beq.n	8003e2c <UART_AdvFeatureConfig+0x28c>
 8003e22:	f640 4123 	movw	r1, #3107	; 0xc23
 8003e26:	4809      	ldr	r0, [pc, #36]	; (8003e4c <UART_AdvFeatureConfig+0x2ac>)
 8003e28:	f7fc fc65 	bl	80006f6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	605a      	str	r2, [r3, #4]
  }
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	08004c24 	.word	0x08004c24

08003e50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af02      	add	r7, sp, #8
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e60:	f7fc fdbe 	bl	80009e0 <HAL_GetTick>
 8003e64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0308 	and.w	r3, r3, #8
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d10e      	bne.n	8003e92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f831 	bl	8003eea <UART_WaitOnFlagUntilTimeout>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e027      	b.n	8003ee2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d10e      	bne.n	8003ebe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ea0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f81b 	bl	8003eea <UART_WaitOnFlagUntilTimeout>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e011      	b.n	8003ee2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b09c      	sub	sp, #112	; 0x70
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	60f8      	str	r0, [r7, #12]
 8003ef2:	60b9      	str	r1, [r7, #8]
 8003ef4:	603b      	str	r3, [r7, #0]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003efa:	e0a7      	b.n	800404c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003efc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f02:	f000 80a3 	beq.w	800404c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f06:	f7fc fd6b 	bl	80009e0 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d302      	bcc.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x32>
 8003f16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d13f      	bne.n	8003f9c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f30:	667b      	str	r3, [r7, #100]	; 0x64
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	461a      	mov	r2, r3
 8003f38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f3c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f42:	e841 2300 	strex	r3, r2, [r1]
 8003f46:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1e6      	bne.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3308      	adds	r3, #8
 8003f54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f58:	e853 3f00 	ldrex	r3, [r3]
 8003f5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f60:	f023 0301 	bic.w	r3, r3, #1
 8003f64:	663b      	str	r3, [r7, #96]	; 0x60
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3308      	adds	r3, #8
 8003f6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f6e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f76:	e841 2300 	strex	r3, r2, [r1]
 8003f7a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1e5      	bne.n	8003f4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2220      	movs	r2, #32
 8003f86:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e068      	b.n	800406e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d050      	beq.n	800404c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fb8:	d148      	bne.n	800404c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fc2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fcc:	e853 3f00 	ldrex	r3, [r3]
 8003fd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fd8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe2:	637b      	str	r3, [r7, #52]	; 0x34
 8003fe4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fe8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fea:	e841 2300 	strex	r3, r2, [r1]
 8003fee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1e6      	bne.n	8003fc4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	3308      	adds	r3, #8
 8003ffc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	e853 3f00 	ldrex	r3, [r3]
 8004004:	613b      	str	r3, [r7, #16]
   return(result);
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f023 0301 	bic.w	r3, r3, #1
 800400c:	66bb      	str	r3, [r7, #104]	; 0x68
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3308      	adds	r3, #8
 8004014:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004016:	623a      	str	r2, [r7, #32]
 8004018:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401a:	69f9      	ldr	r1, [r7, #28]
 800401c:	6a3a      	ldr	r2, [r7, #32]
 800401e:	e841 2300 	strex	r3, r2, [r1]
 8004022:	61bb      	str	r3, [r7, #24]
   return(result);
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1e5      	bne.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2220      	movs	r2, #32
 800402e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2220      	movs	r2, #32
 8004034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2220      	movs	r2, #32
 800403c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e010      	b.n	800406e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	69da      	ldr	r2, [r3, #28]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	4013      	ands	r3, r2
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	429a      	cmp	r2, r3
 800405a:	bf0c      	ite	eq
 800405c:	2301      	moveq	r3, #1
 800405e:	2300      	movne	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	461a      	mov	r2, r3
 8004064:	79fb      	ldrb	r3, [r7, #7]
 8004066:	429a      	cmp	r2, r3
 8004068:	f43f af48 	beq.w	8003efc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3770      	adds	r7, #112	; 0x70
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8004076:	b480      	push	{r7}
 8004078:	b085      	sub	sp, #20
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 8004080:	2300      	movs	r3, #0
 8004082:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 8004084:	2300      	movs	r3, #0
 8004086:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	4413      	add	r3, r2
 800408e:	781a      	ldrb	r2, [r3, #0]
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	440b      	add	r3, r1
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d114      	bne.n	80040c6 <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 800409c:	2301      	movs	r3, #1
 800409e:	60bb      	str	r3, [r7, #8]
		i++;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	3301      	adds	r3, #1
 80040a4:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 80040a6:	e00e      	b.n	80040c6 <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	4413      	add	r3, r2
 80040ae:	781a      	ldrb	r2, [r3, #0]
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	440b      	add	r3, r1
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d001      	beq.n	80040c0 <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 80040bc:	2300      	movs	r3, #0
 80040be:	60bb      	str	r3, [r7, #8]
		}
		i++;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3301      	adds	r3, #1
 80040c4:	60fb      	str	r3, [r7, #12]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d11a      	bne.n	8004102 <ConsoleCommandMatch+0x8c>
	while ( ( 1u == result ) &&
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b09      	cmp	r3, #9
 80040d0:	d817      	bhi.n	8004102 <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4413      	add	r3, r2
 80040d8:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 80040da:	2b20      	cmp	r3, #32
 80040dc:	d011      	beq.n	8004102 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4413      	add	r3, r2
 80040e4:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 80040e6:	2b0a      	cmp	r3, #10
 80040e8:	d00b      	beq.n	8004102 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4413      	add	r3, r2
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	2b0d      	cmp	r3, #13
 80040f4:	d005      	beq.n	8004102 <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4413      	add	r3, r2
 80040fc:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1d2      	bne.n	80040a8 <ConsoleCommandMatch+0x32>
	}

	return result;
 8004102:	68bb      	ldr	r3, [r7, #8]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 8004128:	e00d      	b.n	8004146 <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	441a      	add	r2, r3
 8004130:	68f9      	ldr	r1, [r7, #12]
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	440b      	add	r3, r1
 8004136:	7812      	ldrb	r2, [r2, #0]
 8004138:	701a      	strb	r2, [r3, #0]
		i++;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	3301      	adds	r3, #1
 800413e:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3301      	adds	r3, #1
 8004144:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	429a      	cmp	r2, r3
 800414c:	d3ed      	bcc.n	800412a <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800414e:	e007      	b.n	8004160 <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	4413      	add	r3, r2
 8004156:	2200      	movs	r2, #0
 8004158:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	3301      	adds	r3, #1
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	2bff      	cmp	r3, #255	; 0xff
 8004164:	d9f4      	bls.n	8004150 <ConsoleResetBuffer+0x40>
	}
	return remaining;
 8004166:	693b      	ldr	r3, [r7, #16]
}
 8004168:	4618      	mov	r0, r3
 800416a:	371c      	adds	r7, #28
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 800417e:	2300      	movs	r3, #0
 8004180:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 8004182:	f04f 33ff 	mov.w	r3, #4294967295
 8004186:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 8004188:	e002      	b.n	8004190 <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	3301      	adds	r3, #1
 800418e:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4413      	add	r3, r2
 8004196:	781b      	ldrb	r3, [r3, #0]
			&& ( i < filledLength ) )
 8004198:	2b0d      	cmp	r3, #13
 800419a:	d009      	beq.n	80041b0 <ConsoleCommandEndline+0x3c>
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4413      	add	r3, r2
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b0a      	cmp	r3, #10
 80041a6:	d003      	beq.n	80041b0 <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d3ec      	bcc.n	800418a <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d201      	bcs.n	80041bc <ConsoleCommandEndline+0x48>
	{
		result = i;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	60bb      	str	r3, [r7, #8]
	}
	return result;
 80041bc:	68bb      	ldr	r3, [r7, #8]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
	...

080041cc <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 80041d2:	f000 fb87 	bl	80048e4 <ConsoleIoInit>
	ConsoleIoSendString("Welcome to the Consolinator, your gateway to testing code and hardware.");	
 80041d6:	480f      	ldr	r0, [pc, #60]	; (8004214 <ConsoleInit+0x48>)
 80041d8:	f000 fbc4 	bl	8004964 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80041dc:	480e      	ldr	r0, [pc, #56]	; (8004218 <ConsoleInit+0x4c>)
 80041de:	f000 fbc1 	bl	8004964 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 80041e2:	480e      	ldr	r0, [pc, #56]	; (800421c <ConsoleInit+0x50>)
 80041e4:	f000 fbbe 	bl	8004964 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 80041e8:	4b0d      	ldr	r3, [pc, #52]	; (8004220 <ConsoleInit+0x54>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80041ee:	2300      	movs	r3, #0
 80041f0:	607b      	str	r3, [r7, #4]
 80041f2:	e007      	b.n	8004204 <ConsoleInit+0x38>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 80041f4:	4a0b      	ldr	r2, [pc, #44]	; (8004224 <ConsoleInit+0x58>)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4413      	add	r3, r2
 80041fa:	2200      	movs	r2, #0
 80041fc:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	3301      	adds	r3, #1
 8004202:	607b      	str	r3, [r7, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2bff      	cmp	r3, #255	; 0xff
 8004208:	d9f4      	bls.n	80041f4 <ConsoleInit+0x28>
	}

}
 800420a:	bf00      	nop
 800420c:	bf00      	nop
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	08004c60 	.word	0x08004c60
 8004218:	08004ca8 	.word	0x08004ca8
 800421c:	08004cac 	.word	0x08004cac
 8004220:	20000204 	.word	0x20000204
 8004224:	20000104 	.word	0x20000104

08004228 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 800422e:	4b54      	ldr	r3, [pc, #336]	; (8004380 <ConsoleProcess+0x158>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a54      	ldr	r2, [pc, #336]	; (8004384 <ConsoleProcess+0x15c>)
 8004234:	1898      	adds	r0, r3, r2
 8004236:	4b52      	ldr	r3, [pc, #328]	; (8004380 <ConsoleProcess+0x158>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800423e:	463a      	mov	r2, r7
 8004240:	4619      	mov	r1, r3
 8004242:	f000 fb57 	bl	80048f4 <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d104      	bne.n	8004256 <ConsoleProcess+0x2e>
 800424c:	4b4e      	ldr	r3, [pc, #312]	; (8004388 <ConsoleProcess+0x160>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 8091 	beq.w	8004378 <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 8004256:	4b4c      	ldr	r3, [pc, #304]	; (8004388 <ConsoleProcess+0x160>)
 8004258:	2200      	movs	r2, #0
 800425a:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 800425c:	4b48      	ldr	r3, [pc, #288]	; (8004380 <ConsoleProcess+0x158>)
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	4413      	add	r3, r2
 8004264:	4a46      	ldr	r2, [pc, #280]	; (8004380 <ConsoleProcess+0x158>)
 8004266:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 8004268:	4b45      	ldr	r3, [pc, #276]	; (8004380 <ConsoleProcess+0x158>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4619      	mov	r1, r3
 800426e:	4845      	ldr	r0, [pc, #276]	; (8004384 <ConsoleProcess+0x15c>)
 8004270:	f7ff ff80 	bl	8004174 <ConsoleCommandEndline>
 8004274:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2b00      	cmp	r3, #0
 800427a:	db7d      	blt.n	8004378 <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 800427c:	f000 fb28 	bl	80048d0 <ConsoleCommandsGetTable>
 8004280:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 8004282:	2300      	movs	r3, #0
 8004284:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 8004286:	f04f 33ff 	mov.w	r3, #4294967295
 800428a:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800428c:	e03d      	b.n	800430a <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	4613      	mov	r3, r2
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	4413      	add	r3, r2
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	461a      	mov	r2, r3
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	4413      	add	r3, r2
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4938      	ldr	r1, [pc, #224]	; (8004384 <ConsoleProcess+0x15c>)
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff fee7 	bl	8004076 <ConsoleCommandMatch>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d02a      	beq.n	8004304 <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	4613      	mov	r3, r2
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	4413      	add	r3, r2
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	461a      	mov	r2, r3
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	4413      	add	r3, r2
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	4830      	ldr	r0, [pc, #192]	; (8004384 <ConsoleProcess+0x15c>)
 80042c2:	4798      	blx	r3
 80042c4:	4603      	mov	r3, r0
 80042c6:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 80042c8:	79fb      	ldrb	r3, [r7, #7]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d017      	beq.n	80042fe <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 80042ce:	482f      	ldr	r0, [pc, #188]	; (800438c <ConsoleProcess+0x164>)
 80042d0:	f000 fb48 	bl	8004964 <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 80042d4:	482b      	ldr	r0, [pc, #172]	; (8004384 <ConsoleProcess+0x15c>)
 80042d6:	f000 fb45 	bl	8004964 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 80042da:	482d      	ldr	r0, [pc, #180]	; (8004390 <ConsoleProcess+0x168>)
 80042dc:	f000 fb42 	bl	8004964 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	4613      	mov	r3, r2
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	4413      	add	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	461a      	mov	r2, r3
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	4413      	add	r3, r2
 80042f0:	3308      	adds	r3, #8
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fb36 	bl	8004964 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 80042f8:	4826      	ldr	r0, [pc, #152]	; (8004394 <ConsoleProcess+0x16c>)
 80042fa:	f000 fb33 	bl	8004964 <ConsoleIoSendString>

					}
					found = cmdIndex;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	613b      	str	r3, [r7, #16]
 8004302:	e002      	b.n	800430a <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	3301      	adds	r3, #1
 8004308:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	4613      	mov	r3, r2
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	4413      	add	r3, r2
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	461a      	mov	r2, r3
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	4413      	add	r3, r2
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <ConsoleProcess+0x100>
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004326:	d0b2      	beq.n	800428e <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00d      	beq.n	800434a <ConsoleProcess+0x122>
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004334:	d109      	bne.n	800434a <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 8004336:	4b12      	ldr	r3, [pc, #72]	; (8004380 <ConsoleProcess+0x158>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b02      	cmp	r3, #2
 800433c:	d905      	bls.n	800434a <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 800433e:	4816      	ldr	r0, [pc, #88]	; (8004398 <ConsoleProcess+0x170>)
 8004340:	f000 fb10 	bl	8004964 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 8004344:	4813      	ldr	r0, [pc, #76]	; (8004394 <ConsoleProcess+0x16c>)
 8004346:	f000 fb0d 	bl	8004964 <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 800434a:	4b0d      	ldr	r3, [pc, #52]	; (8004380 <ConsoleProcess+0x158>)
 800434c:	6819      	ldr	r1, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	3301      	adds	r3, #1
 8004352:	461a      	mov	r2, r3
 8004354:	480b      	ldr	r0, [pc, #44]	; (8004384 <ConsoleProcess+0x15c>)
 8004356:	f7ff fedb 	bl	8004110 <ConsoleResetBuffer>
 800435a:	4603      	mov	r3, r0
 800435c:	4a08      	ldr	r2, [pc, #32]	; (8004380 <ConsoleProcess+0x158>)
 800435e:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 8004360:	4b07      	ldr	r3, [pc, #28]	; (8004380 <ConsoleProcess+0x158>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	bf14      	ite	ne
 8004368:	2301      	movne	r3, #1
 800436a:	2300      	moveq	r3, #0
 800436c:	b2da      	uxtb	r2, r3
 800436e:	4b06      	ldr	r3, [pc, #24]	; (8004388 <ConsoleProcess+0x160>)
 8004370:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 8004372:	480a      	ldr	r0, [pc, #40]	; (800439c <ConsoleProcess+0x174>)
 8004374:	f000 faf6 	bl	8004964 <ConsoleIoSendString>
		}
	}
}
 8004378:	bf00      	nop
 800437a:	3718      	adds	r7, #24
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	20000204 	.word	0x20000204
 8004384:	20000104 	.word	0x20000104
 8004388:	20000208 	.word	0x20000208
 800438c:	08004cb0 	.word	0x08004cb0
 8004390:	08004cb8 	.word	0x08004cb8
 8004394:	08004ca8 	.word	0x08004ca8
 8004398:	08004cc0 	.word	0x08004cc0
 800439c:	08004cac 	.word	0x08004cac

080043a0 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b089      	sub	sp, #36	; 0x24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	460b      	mov	r3, r1
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 80043ae:	2300      	movs	r3, #0
 80043b0:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 80043b2:	2300      	movs	r3, #0
 80043b4:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 80043b6:	2300      	movs	r3, #0
 80043b8:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80043ba:	e00b      	b.n	80043d4 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	4413      	add	r3, r2
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2b20      	cmp	r3, #32
 80043c6:	d102      	bne.n	80043ce <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	3301      	adds	r3, #1
 80043cc:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	3301      	adds	r3, #1
 80043d2:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80043d4:	7afb      	ldrb	r3, [r7, #11]
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d002      	beq.n	80043e2 <ConsoleParamFindN+0x42>
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	2bff      	cmp	r3, #255	; 0xff
 80043e0:	d9ec      	bls.n	80043bc <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043e8:	d102      	bne.n	80043f0 <ConsoleParamFindN+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 80043ea:	2310      	movs	r3, #16
 80043ec:	75fb      	strb	r3, [r7, #23]
 80043ee:	e002      	b.n	80043f6 <ConsoleParamFindN+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	601a      	str	r2, [r3, #0]
	}
	return result;
 80043f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3724      	adds	r7, #36	; 0x24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b08a      	sub	sp, #40	; 0x28
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	460b      	mov	r3, r1
 800440e:	607a      	str	r2, [r7, #4]
 8004410:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8004412:	2300      	movs	r3, #0
 8004414:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8004416:	f107 021c 	add.w	r2, r7, #28
 800441a:	7afb      	ldrb	r3, [r7, #11]
 800441c:	4619      	mov	r1, r3
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f7ff ffbe 	bl	80043a0 <ConsoleParamFindN>
 8004424:	4603      	mov	r3, r0
 8004426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 800442a:	2300      	movs	r3, #0
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 800442e:	69fa      	ldr	r2, [r7, #28]
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	4413      	add	r3, r2
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	4413      	add	r3, r2
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 800443e:	e011      	b.n	8004464 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 8004440:	f107 0214 	add.w	r2, r7, #20
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	4413      	add	r3, r2
 8004448:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800444c:	701a      	strb	r2, [r3, #0]
		i++;
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	3301      	adds	r3, #1
 8004452:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8004454:	69fa      	ldr	r2, [r7, #28]
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	4413      	add	r3, r2
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	4413      	add	r3, r2
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		&& ( i < INT16_MAX_STR_LENGTH ) )
 8004464:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004468:	2b0a      	cmp	r3, #10
 800446a:	d00a      	beq.n	8004482 <ConsoleReceiveParamInt16+0x7e>
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 800446c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004470:	2b0d      	cmp	r3, #13
 8004472:	d006      	beq.n	8004482 <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 8004474:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004478:	2b20      	cmp	r3, #32
 800447a:	d002      	beq.n	8004482 <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	2b07      	cmp	r3, #7
 8004480:	d9de      	bls.n	8004440 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	2b08      	cmp	r3, #8
 8004486:	d102      	bne.n	800448e <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 8004488:	2310      	movs	r3, #16
 800448a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 800448e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10e      	bne.n	80044b4 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 8004496:	f107 0214 	add.w	r2, r7, #20
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	4413      	add	r3, r2
 800449e:	2200      	movs	r2, #0
 80044a0:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 80044a2:	f107 0314 	add.w	r3, r7, #20
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fa78 	bl	800499c <atoi>
 80044ac:	4603      	mov	r3, r0
 80044ae:	b21a      	sxth	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	801a      	strh	r2, [r3, #0]
	}
	return result;
 80044b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3728      	adds	r7, #40	; 0x28
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08a      	sub	sp, #40	; 0x28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	460b      	mov	r3, r1
 80044ca:	607a      	str	r2, [r7, #4]
 80044cc:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80044ce:	2300      	movs	r3, #0
 80044d0:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 80044d2:	2300      	movs	r3, #0
 80044d4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80044d6:	f107 0218 	add.w	r2, r7, #24
 80044da:	7afb      	ldrb	r3, [r7, #11]
 80044dc:	4619      	mov	r1, r3
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f7ff ff5e 	bl	80043a0 <ConsoleParamFindN>
 80044e4:	4603      	mov	r3, r0
 80044e6:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 80044e8:	7ffb      	ldrb	r3, [r7, #31]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d12c      	bne.n	8004548 <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 80044ee:	2300      	movs	r3, #0
 80044f0:	623b      	str	r3, [r7, #32]
 80044f2:	e01e      	b.n	8004532 <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 80044f4:	7ffb      	ldrb	r3, [r7, #31]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10d      	bne.n	8004516 <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	4413      	add	r3, r2
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	4413      	add	r3, r2
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	f107 0217 	add.w	r2, r7, #23
 800450a:	4611      	mov	r1, r2
 800450c:	4618      	mov	r0, r3
 800450e:	f000 f8c5 	bl	800469c <ConsoleUtilHexCharToInt>
 8004512:	4603      	mov	r3, r0
 8004514:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 8004516:	7ffb      	ldrb	r3, [r7, #31]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d107      	bne.n	800452c <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 800451c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8004522:	7dfb      	ldrb	r3, [r7, #23]
 8004524:	b29a      	uxth	r2, r3
 8004526:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004528:	4413      	add	r3, r2
 800452a:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	3301      	adds	r3, #1
 8004530:	623b      	str	r3, [r7, #32]
 8004532:	6a3b      	ldr	r3, [r7, #32]
 8004534:	2b03      	cmp	r3, #3
 8004536:	d9dd      	bls.n	80044f4 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 8004538:	7ffb      	ldrb	r3, [r7, #31]
 800453a:	2b11      	cmp	r3, #17
 800453c:	d101      	bne.n	8004542 <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 800453e:	2300      	movs	r3, #0
 8004540:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004546:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8004548:	7ffb      	ldrb	r3, [r7, #31]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3728      	adds	r7, #40	; 0x28
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b086      	sub	sp, #24
 8004556:	af00      	add	r7, sp, #0
 8004558:	4603      	mov	r3, r0
 800455a:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 800455c:	2300      	movs	r3, #0
 800455e:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8004560:	2300      	movs	r3, #0
 8004562:	617b      	str	r3, [r7, #20]
 8004564:	e01b      	b.n	800459e <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 8004566:	7cfb      	ldrb	r3, [r7, #19]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d115      	bne.n	8004598 <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 800456c:	88fa      	ldrh	r2, [r7, #6]
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f1c3 0303 	rsb	r3, r3, #3
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	fa42 f303 	asr.w	r3, r2, r3
 800457a:	b2db      	uxtb	r3, r3
 800457c:	f003 030f 	and.w	r3, r3, #15
 8004580:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8004582:	f107 020c 	add.w	r2, r7, #12
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	441a      	add	r2, r3
 800458a:	7cbb      	ldrb	r3, [r7, #18]
 800458c:	4611      	mov	r1, r2
 800458e:	4618      	mov	r0, r3
 8004590:	f000 f8c5 	bl	800471e <ConsoleUtilsIntToHexChar>
 8004594:	4603      	mov	r3, r0
 8004596:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	3301      	adds	r3, #1
 800459c:	617b      	str	r3, [r7, #20]
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2b03      	cmp	r3, #3
 80045a2:	d9e0      	bls.n	8004566 <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 80045a4:	f107 020c 	add.w	r2, r7, #12
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	4413      	add	r3, r2
 80045ac:	2200      	movs	r2, #0
 80045ae:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 80045b0:	f107 030c 	add.w	r3, r7, #12
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 f9d5 	bl	8004964 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3718      	adds	r7, #24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b089      	sub	sp, #36	; 0x24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 80045d0:	2300      	movs	r3, #0
 80045d2:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 80045d4:	2301      	movs	r3, #1
 80045d6:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	da07      	bge.n	80045ee <smallItoa+0x2a>
		isNegative = true;
 80045de:	2301      	movs	r3, #1
 80045e0:	77fb      	strb	r3, [r7, #31]
		in = -in;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	425b      	negs	r3, r3
 80045e6:	60fb      	str	r3, [r7, #12]
		stringLen++;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	3301      	adds	r3, #1
 80045ec:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 80045f2:	e007      	b.n	8004604 <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80045fc:	61bb      	str	r3, [r7, #24]
		stringLen++;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	3301      	adds	r3, #1
 8004602:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	fb92 f3f3 	sdiv	r3, r2, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1f1      	bne.n	80045f4 <smallItoa+0x30>
	}
    
    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	4413      	add	r3, r2
 8004616:	2200      	movs	r2, #0
 8004618:	701a      	strb	r2, [r3, #0]
    stringLen--;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	3b01      	subs	r3, #1
 800461e:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	fb93 f2f2 	sdiv	r2, r3, r2
 800462c:	6879      	ldr	r1, [r7, #4]
 800462e:	fb01 f202 	mul.w	r2, r1, r2
 8004632:	1a9b      	subs	r3, r3, r2
 8004634:	b2da      	uxtb	r2, r3
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	68b9      	ldr	r1, [r7, #8]
 800463a:	440b      	add	r3, r1
 800463c:	3230      	adds	r2, #48	; 0x30
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	fb92 f3f3 	sdiv	r3, r2, r3
 800464a:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	1e5a      	subs	r2, r3, #1
 8004650:	617a      	str	r2, [r7, #20]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1e6      	bne.n	8004624 <smallItoa+0x60>

	if (isNegative) {
 8004656:	7ffb      	ldrb	r3, [r7, #31]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <smallItoa+0x9e>
		*(outBuffer) = '-';
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	222d      	movs	r2, #45	; 0x2d
 8004660:	701a      	strb	r2, [r3, #0]
	}
}
 8004662:	bf00      	nop
 8004664:	3724      	adds	r7, #36	; 0x24
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b084      	sub	sp, #16
 8004672:	af00      	add	r7, sp, #0
 8004674:	4603      	mov	r3, r0
 8004676:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8004678:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800467c:	f107 0108 	add.w	r1, r7, #8
 8004680:	220a      	movs	r2, #10
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff ff9e 	bl	80045c4 <smallItoa>
	ConsoleIoSendString(out);
 8004688:	f107 0308 	add.w	r3, r7, #8
 800468c:	4618      	mov	r0, r3
 800468e:	f000 f969 	bl	8004964 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	4603      	mov	r3, r0
 80046a4:	6039      	str	r1, [r7, #0]
 80046a6:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 80046a8:	2300      	movs	r3, #0
 80046aa:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 80046ac:	79fb      	ldrb	r3, [r7, #7]
 80046ae:	2b2f      	cmp	r3, #47	; 0x2f
 80046b0:	d908      	bls.n	80046c4 <ConsoleUtilHexCharToInt+0x28>
 80046b2:	79fb      	ldrb	r3, [r7, #7]
 80046b4:	2b39      	cmp	r3, #57	; 0x39
 80046b6:	d805      	bhi.n	80046c4 <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 80046b8:	79fb      	ldrb	r3, [r7, #7]
 80046ba:	3b30      	subs	r3, #48	; 0x30
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	701a      	strb	r2, [r3, #0]
 80046c2:	e025      	b.n	8004710 <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 80046c4:	79fb      	ldrb	r3, [r7, #7]
 80046c6:	2b40      	cmp	r3, #64	; 0x40
 80046c8:	d908      	bls.n	80046dc <ConsoleUtilHexCharToInt+0x40>
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	2b46      	cmp	r3, #70	; 0x46
 80046ce:	d805      	bhi.n	80046dc <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 80046d0:	79fb      	ldrb	r3, [r7, #7]
 80046d2:	3b37      	subs	r3, #55	; 0x37
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	701a      	strb	r2, [r3, #0]
 80046da:	e019      	b.n	8004710 <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 80046dc:	79fb      	ldrb	r3, [r7, #7]
 80046de:	2b60      	cmp	r3, #96	; 0x60
 80046e0:	d908      	bls.n	80046f4 <ConsoleUtilHexCharToInt+0x58>
 80046e2:	79fb      	ldrb	r3, [r7, #7]
 80046e4:	2b66      	cmp	r3, #102	; 0x66
 80046e6:	d805      	bhi.n	80046f4 <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 80046e8:	79fb      	ldrb	r3, [r7, #7]
 80046ea:	3b57      	subs	r3, #87	; 0x57
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	701a      	strb	r2, [r3, #0]
 80046f2:	e00d      	b.n	8004710 <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 80046f4:	79fb      	ldrb	r3, [r7, #7]
 80046f6:	2b0a      	cmp	r3, #10
 80046f8:	d105      	bne.n	8004706 <ConsoleUtilHexCharToInt+0x6a>
 80046fa:	79fb      	ldrb	r3, [r7, #7]
 80046fc:	2b0d      	cmp	r3, #13
 80046fe:	d102      	bne.n	8004706 <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8004700:	79fb      	ldrb	r3, [r7, #7]
 8004702:	2b20      	cmp	r3, #32
 8004704:	d102      	bne.n	800470c <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8004706:	2311      	movs	r3, #17
 8004708:	73fb      	strb	r3, [r7, #15]
 800470a:	e001      	b.n	8004710 <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 800470c:	2310      	movs	r3, #16
 800470e:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8004710:	7bfb      	ldrb	r3, [r7, #15]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 800471e:	b480      	push	{r7}
 8004720:	b085      	sub	sp, #20
 8004722:	af00      	add	r7, sp, #0
 8004724:	4603      	mov	r3, r0
 8004726:	6039      	str	r1, [r7, #0]
 8004728:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 800472a:	2300      	movs	r3, #0
 800472c:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 800472e:	79fb      	ldrb	r3, [r7, #7]
 8004730:	2b09      	cmp	r3, #9
 8004732:	d805      	bhi.n	8004740 <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8004734:	79fb      	ldrb	r3, [r7, #7]
 8004736:	3330      	adds	r3, #48	; 0x30
 8004738:	b2da      	uxtb	r2, r3
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	701a      	strb	r2, [r3, #0]
 800473e:	e00d      	b.n	800475c <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8004740:	79fb      	ldrb	r3, [r7, #7]
 8004742:	2b09      	cmp	r3, #9
 8004744:	d908      	bls.n	8004758 <ConsoleUtilsIntToHexChar+0x3a>
 8004746:	79fb      	ldrb	r3, [r7, #7]
 8004748:	2b0f      	cmp	r3, #15
 800474a:	d805      	bhi.n	8004758 <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 800474c:	79fb      	ldrb	r3, [r7, #7]
 800474e:	3337      	adds	r3, #55	; 0x37
 8004750:	b2da      	uxtb	r2, r3
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	701a      	strb	r2, [r3, #0]
 8004756:	e001      	b.n	800475c <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8004758:	2310      	movs	r3, #16
 800475a:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 800475c:	7bfb      	ldrb	r3, [r7, #15]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <ConsoleCommandComment>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8004788:	2300      	movs	r3, #0
 800478a:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 800478c:	2306      	movs	r3, #6
 800478e:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8004790:	2300      	movs	r3, #0
 8004792:	617b      	str	r3, [r7, #20]
 8004794:	e01e      	b.n	80047d4 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8004796:	4914      	ldr	r1, [pc, #80]	; (80047e8 <ConsoleCommandHelp+0x68>)
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	4613      	mov	r3, r2
 800479c:	00db      	lsls	r3, r3, #3
 800479e:	4413      	add	r3, r2
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	440b      	add	r3, r1
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 f8dc 	bl	8004964 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 80047ac:	480f      	ldr	r0, [pc, #60]	; (80047ec <ConsoleCommandHelp+0x6c>)
 80047ae:	f000 f8d9 	bl	8004964 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	4613      	mov	r3, r2
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	4413      	add	r3, r2
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	3308      	adds	r3, #8
 80047be:	4a0a      	ldr	r2, [pc, #40]	; (80047e8 <ConsoleCommandHelp+0x68>)
 80047c0:	4413      	add	r3, r2
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 f8ce 	bl	8004964 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 80047c8:	4809      	ldr	r0, [pc, #36]	; (80047f0 <ConsoleCommandHelp+0x70>)
 80047ca:	f000 f8cb 	bl	8004964 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	3301      	adds	r3, #1
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d3db      	bcc.n	8004796 <ConsoleCommandHelp+0x16>
	}
	return result;
 80047de:	7cfb      	ldrb	r3, [r7, #19]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3718      	adds	r7, #24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	08004d54 	.word	0x08004d54
 80047ec:	08004cf0 	.word	0x08004cf0
 80047f0:	08004cf4 	.word	0x08004cf4

080047f4 <ConsoleCommandParamExampleInt16>:

static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 80047fc:	f107 030c 	add.w	r3, r7, #12
 8004800:	461a      	mov	r2, r3
 8004802:	2101      	movs	r1, #1
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7ff fdfd 	bl	8004404 <ConsoleReceiveParamInt16>
 800480a:	4603      	mov	r3, r0
 800480c:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 800480e:	7bfb      	ldrb	r3, [r7, #15]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d116      	bne.n	8004842 <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8004814:	480d      	ldr	r0, [pc, #52]	; (800484c <ConsoleCommandParamExampleInt16+0x58>)
 8004816:	f000 f8a5 	bl	8004964 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 800481a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff ff25 	bl	800466e <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8004824:	480a      	ldr	r0, [pc, #40]	; (8004850 <ConsoleCommandParamExampleInt16+0x5c>)
 8004826:	f000 f89d 	bl	8004964 <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 800482a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800482e:	b29b      	uxth	r3, r3
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff fe8e 	bl	8004552 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 8004836:	4807      	ldr	r0, [pc, #28]	; (8004854 <ConsoleCommandParamExampleInt16+0x60>)
 8004838:	f000 f894 	bl	8004964 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 800483c:	4806      	ldr	r0, [pc, #24]	; (8004858 <ConsoleCommandParamExampleInt16+0x64>)
 800483e:	f000 f891 	bl	8004964 <ConsoleIoSendString>
	}
	return result;
 8004842:	7bfb      	ldrb	r3, [r7, #15]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	08004cf8 	.word	0x08004cf8
 8004850:	08004d08 	.word	0x08004d08
 8004854:	08004d10 	.word	0x08004d10
 8004858:	08004cf4 	.word	0x08004cf4

0800485c <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8004864:	f107 030c 	add.w	r3, r7, #12
 8004868:	461a      	mov	r2, r3
 800486a:	2101      	movs	r1, #1
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7ff fe27 	bl	80044c0 <ConsoleReceiveParamHexUint16>
 8004872:	4603      	mov	r3, r0
 8004874:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8004876:	7bfb      	ldrb	r3, [r7, #15]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d109      	bne.n	8004890 <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 800487c:	4807      	ldr	r0, [pc, #28]	; (800489c <ConsoleCommandParamExampleHexUint16+0x40>)
 800487e:	f000 f871 	bl	8004964 <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 8004882:	89bb      	ldrh	r3, [r7, #12]
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff fe64 	bl	8004552 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 800488a:	4805      	ldr	r0, [pc, #20]	; (80048a0 <ConsoleCommandParamExampleHexUint16+0x44>)
 800488c:	f000 f86a 	bl	8004964 <ConsoleIoSendString>
	}
	return result;
 8004890:	7bfb      	ldrb	r3, [r7, #15]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	08004d14 	.word	0x08004d14
 80048a0:	08004cf4 	.word	0x08004cf4

080048a4 <ConsoleCommandVer>:

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 80048ac:	2300      	movs	r3, #0
 80048ae:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 80048b0:	4805      	ldr	r0, [pc, #20]	; (80048c8 <ConsoleCommandVer+0x24>)
 80048b2:	f000 f857 	bl	8004964 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80048b6:	4805      	ldr	r0, [pc, #20]	; (80048cc <ConsoleCommandVer+0x28>)
 80048b8:	f000 f854 	bl	8004964 <ConsoleIoSendString>
	return result;
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	08004d24 	.word	0x08004d24
 80048cc:	08004cf4 	.word	0x08004cf4

080048d0 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 80048d4:	4b02      	ldr	r3, [pc, #8]	; (80048e0 <ConsoleCommandsGetTable+0x10>)
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	08004d54 	.word	0x08004d54

080048e4 <ConsoleIoInit>:

#include <string.h>
#include "usart.h"

eConsoleError ConsoleIoInit(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
	return CONSOLE_SUCCESS;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <ConsoleIoReceive>:

eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
    uint32_t i = 0;
 8004900:	2300      	movs	r3, #0
 8004902:	617b      	str	r3, [r7, #20]
    uint8_t rxByte = 0;
 8004904:	2300      	movs	r3, #0
 8004906:	74fb      	strb	r3, [r7, #19]


	while (HAL_UART_GetState(&huart3) != HAL_UART_STATE_READY);
 8004908:	bf00      	nop
 800490a:	4815      	ldr	r0, [pc, #84]	; (8004960 <ConsoleIoReceive+0x6c>)
 800490c:	f7fe fe3d 	bl	800358a <HAL_UART_GetState>
 8004910:	4603      	mov	r3, r0
 8004912:	2b20      	cmp	r3, #32
 8004914:	d1f9      	bne.n	800490a <ConsoleIoReceive+0x16>

	if (HAL_OK != HAL_UART_Receive(&huart3, &rxByte, 1, HAL_MAX_DELAY))
 8004916:	f107 0113 	add.w	r1, r7, #19
 800491a:	f04f 33ff 	mov.w	r3, #4294967295
 800491e:	2201      	movs	r2, #1
 8004920:	480f      	ldr	r0, [pc, #60]	; (8004960 <ConsoleIoReceive+0x6c>)
 8004922:	f7fe fd6e 	bl	8003402 <HAL_UART_Receive>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <ConsoleIoReceive+0x3c>
	{
		return CONSOLE_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e013      	b.n	8004958 <ConsoleIoReceive+0x64>
	}

	/* Send echo */
	HAL_UART_Transmit(&huart3, (const uint8_t*)&rxByte, 1, HAL_MAX_DELAY);
 8004930:	f107 0113 	add.w	r1, r7, #19
 8004934:	f04f 33ff 	mov.w	r3, #4294967295
 8004938:	2201      	movs	r2, #1
 800493a:	4809      	ldr	r0, [pc, #36]	; (8004960 <ConsoleIoReceive+0x6c>)
 800493c:	f7fe fcde 	bl	80032fc <HAL_UART_Transmit>

	buffer[i] = rxByte;
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	4413      	add	r3, r2
 8004946:	7cfa      	ldrb	r2, [r7, #19]
 8004948:	701a      	strb	r2, [r3, #0]
	i++;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	3301      	adds	r3, #1
 800494e:	617b      	str	r3, [r7, #20]


	*readLength = i;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	601a      	str	r2, [r3, #0]

	return CONSOLE_SUCCESS;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	20000078 	.word	0x20000078

08004964 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
	uint32_t byteCount = strlen(buffer);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7fb fc63 	bl	8000238 <strlen>
 8004972:	60f8      	str	r0, [r7, #12]

	// printf("%s", buffer);

	if (HAL_OK != HAL_UART_Transmit(&huart3, (const uint8_t*)buffer, byteCount, 50))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	b29a      	uxth	r2, r3
 8004978:	2332      	movs	r3, #50	; 0x32
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	4806      	ldr	r0, [pc, #24]	; (8004998 <ConsoleIoSendString+0x34>)
 800497e:	f7fe fcbd 	bl	80032fc <HAL_UART_Transmit>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <ConsoleIoSendString+0x28>
	{
		return CONSOLE_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e000      	b.n	800498e <ConsoleIoSendString+0x2a>
	}



	return CONSOLE_SUCCESS;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	20000078 	.word	0x20000078

0800499c <atoi>:
 800499c:	220a      	movs	r2, #10
 800499e:	2100      	movs	r1, #0
 80049a0:	f000 b882 	b.w	8004aa8 <strtol>

080049a4 <_strtol_l.constprop.0>:
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049aa:	d001      	beq.n	80049b0 <_strtol_l.constprop.0+0xc>
 80049ac:	2b24      	cmp	r3, #36	; 0x24
 80049ae:	d906      	bls.n	80049be <_strtol_l.constprop.0+0x1a>
 80049b0:	f000 f88c 	bl	8004acc <__errno>
 80049b4:	2316      	movs	r3, #22
 80049b6:	6003      	str	r3, [r0, #0]
 80049b8:	2000      	movs	r0, #0
 80049ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049be:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004aa4 <_strtol_l.constprop.0+0x100>
 80049c2:	460d      	mov	r5, r1
 80049c4:	462e      	mov	r6, r5
 80049c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80049ca:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80049ce:	f017 0708 	ands.w	r7, r7, #8
 80049d2:	d1f7      	bne.n	80049c4 <_strtol_l.constprop.0+0x20>
 80049d4:	2c2d      	cmp	r4, #45	; 0x2d
 80049d6:	d132      	bne.n	8004a3e <_strtol_l.constprop.0+0x9a>
 80049d8:	782c      	ldrb	r4, [r5, #0]
 80049da:	2701      	movs	r7, #1
 80049dc:	1cb5      	adds	r5, r6, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d05b      	beq.n	8004a9a <_strtol_l.constprop.0+0xf6>
 80049e2:	2b10      	cmp	r3, #16
 80049e4:	d109      	bne.n	80049fa <_strtol_l.constprop.0+0x56>
 80049e6:	2c30      	cmp	r4, #48	; 0x30
 80049e8:	d107      	bne.n	80049fa <_strtol_l.constprop.0+0x56>
 80049ea:	782c      	ldrb	r4, [r5, #0]
 80049ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80049f0:	2c58      	cmp	r4, #88	; 0x58
 80049f2:	d14d      	bne.n	8004a90 <_strtol_l.constprop.0+0xec>
 80049f4:	786c      	ldrb	r4, [r5, #1]
 80049f6:	2310      	movs	r3, #16
 80049f8:	3502      	adds	r5, #2
 80049fa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80049fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8004a02:	f04f 0e00 	mov.w	lr, #0
 8004a06:	fbb8 f9f3 	udiv	r9, r8, r3
 8004a0a:	4676      	mov	r6, lr
 8004a0c:	fb03 8a19 	mls	sl, r3, r9, r8
 8004a10:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004a14:	f1bc 0f09 	cmp.w	ip, #9
 8004a18:	d816      	bhi.n	8004a48 <_strtol_l.constprop.0+0xa4>
 8004a1a:	4664      	mov	r4, ip
 8004a1c:	42a3      	cmp	r3, r4
 8004a1e:	dd24      	ble.n	8004a6a <_strtol_l.constprop.0+0xc6>
 8004a20:	f1be 3fff 	cmp.w	lr, #4294967295
 8004a24:	d008      	beq.n	8004a38 <_strtol_l.constprop.0+0x94>
 8004a26:	45b1      	cmp	r9, r6
 8004a28:	d31c      	bcc.n	8004a64 <_strtol_l.constprop.0+0xc0>
 8004a2a:	d101      	bne.n	8004a30 <_strtol_l.constprop.0+0x8c>
 8004a2c:	45a2      	cmp	sl, r4
 8004a2e:	db19      	blt.n	8004a64 <_strtol_l.constprop.0+0xc0>
 8004a30:	fb06 4603 	mla	r6, r6, r3, r4
 8004a34:	f04f 0e01 	mov.w	lr, #1
 8004a38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004a3c:	e7e8      	b.n	8004a10 <_strtol_l.constprop.0+0x6c>
 8004a3e:	2c2b      	cmp	r4, #43	; 0x2b
 8004a40:	bf04      	itt	eq
 8004a42:	782c      	ldrbeq	r4, [r5, #0]
 8004a44:	1cb5      	addeq	r5, r6, #2
 8004a46:	e7ca      	b.n	80049de <_strtol_l.constprop.0+0x3a>
 8004a48:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004a4c:	f1bc 0f19 	cmp.w	ip, #25
 8004a50:	d801      	bhi.n	8004a56 <_strtol_l.constprop.0+0xb2>
 8004a52:	3c37      	subs	r4, #55	; 0x37
 8004a54:	e7e2      	b.n	8004a1c <_strtol_l.constprop.0+0x78>
 8004a56:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004a5a:	f1bc 0f19 	cmp.w	ip, #25
 8004a5e:	d804      	bhi.n	8004a6a <_strtol_l.constprop.0+0xc6>
 8004a60:	3c57      	subs	r4, #87	; 0x57
 8004a62:	e7db      	b.n	8004a1c <_strtol_l.constprop.0+0x78>
 8004a64:	f04f 3eff 	mov.w	lr, #4294967295
 8004a68:	e7e6      	b.n	8004a38 <_strtol_l.constprop.0+0x94>
 8004a6a:	f1be 3fff 	cmp.w	lr, #4294967295
 8004a6e:	d105      	bne.n	8004a7c <_strtol_l.constprop.0+0xd8>
 8004a70:	2322      	movs	r3, #34	; 0x22
 8004a72:	6003      	str	r3, [r0, #0]
 8004a74:	4646      	mov	r6, r8
 8004a76:	b942      	cbnz	r2, 8004a8a <_strtol_l.constprop.0+0xe6>
 8004a78:	4630      	mov	r0, r6
 8004a7a:	e79e      	b.n	80049ba <_strtol_l.constprop.0+0x16>
 8004a7c:	b107      	cbz	r7, 8004a80 <_strtol_l.constprop.0+0xdc>
 8004a7e:	4276      	negs	r6, r6
 8004a80:	2a00      	cmp	r2, #0
 8004a82:	d0f9      	beq.n	8004a78 <_strtol_l.constprop.0+0xd4>
 8004a84:	f1be 0f00 	cmp.w	lr, #0
 8004a88:	d000      	beq.n	8004a8c <_strtol_l.constprop.0+0xe8>
 8004a8a:	1e69      	subs	r1, r5, #1
 8004a8c:	6011      	str	r1, [r2, #0]
 8004a8e:	e7f3      	b.n	8004a78 <_strtol_l.constprop.0+0xd4>
 8004a90:	2430      	movs	r4, #48	; 0x30
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1b1      	bne.n	80049fa <_strtol_l.constprop.0+0x56>
 8004a96:	2308      	movs	r3, #8
 8004a98:	e7af      	b.n	80049fa <_strtol_l.constprop.0+0x56>
 8004a9a:	2c30      	cmp	r4, #48	; 0x30
 8004a9c:	d0a5      	beq.n	80049ea <_strtol_l.constprop.0+0x46>
 8004a9e:	230a      	movs	r3, #10
 8004aa0:	e7ab      	b.n	80049fa <_strtol_l.constprop.0+0x56>
 8004aa2:	bf00      	nop
 8004aa4:	08004f05 	.word	0x08004f05

08004aa8 <strtol>:
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	460a      	mov	r2, r1
 8004aac:	4601      	mov	r1, r0
 8004aae:	4802      	ldr	r0, [pc, #8]	; (8004ab8 <strtol+0x10>)
 8004ab0:	6800      	ldr	r0, [r0, #0]
 8004ab2:	f7ff bf77 	b.w	80049a4 <_strtol_l.constprop.0>
 8004ab6:	bf00      	nop
 8004ab8:	20000058 	.word	0x20000058

08004abc <memset>:
 8004abc:	4402      	add	r2, r0
 8004abe:	4603      	mov	r3, r0
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d100      	bne.n	8004ac6 <memset+0xa>
 8004ac4:	4770      	bx	lr
 8004ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8004aca:	e7f9      	b.n	8004ac0 <memset+0x4>

08004acc <__errno>:
 8004acc:	4b01      	ldr	r3, [pc, #4]	; (8004ad4 <__errno+0x8>)
 8004ace:	6818      	ldr	r0, [r3, #0]
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	20000058 	.word	0x20000058

08004ad8 <__libc_init_array>:
 8004ad8:	b570      	push	{r4, r5, r6, lr}
 8004ada:	4d0d      	ldr	r5, [pc, #52]	; (8004b10 <__libc_init_array+0x38>)
 8004adc:	4c0d      	ldr	r4, [pc, #52]	; (8004b14 <__libc_init_array+0x3c>)
 8004ade:	1b64      	subs	r4, r4, r5
 8004ae0:	10a4      	asrs	r4, r4, #2
 8004ae2:	2600      	movs	r6, #0
 8004ae4:	42a6      	cmp	r6, r4
 8004ae6:	d109      	bne.n	8004afc <__libc_init_array+0x24>
 8004ae8:	4d0b      	ldr	r5, [pc, #44]	; (8004b18 <__libc_init_array+0x40>)
 8004aea:	4c0c      	ldr	r4, [pc, #48]	; (8004b1c <__libc_init_array+0x44>)
 8004aec:	f000 f818 	bl	8004b20 <_init>
 8004af0:	1b64      	subs	r4, r4, r5
 8004af2:	10a4      	asrs	r4, r4, #2
 8004af4:	2600      	movs	r6, #0
 8004af6:	42a6      	cmp	r6, r4
 8004af8:	d105      	bne.n	8004b06 <__libc_init_array+0x2e>
 8004afa:	bd70      	pop	{r4, r5, r6, pc}
 8004afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b00:	4798      	blx	r3
 8004b02:	3601      	adds	r6, #1
 8004b04:	e7ee      	b.n	8004ae4 <__libc_init_array+0xc>
 8004b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b0a:	4798      	blx	r3
 8004b0c:	3601      	adds	r6, #1
 8004b0e:	e7f2      	b.n	8004af6 <__libc_init_array+0x1e>
 8004b10:	08005010 	.word	0x08005010
 8004b14:	08005010 	.word	0x08005010
 8004b18:	08005010 	.word	0x08005010
 8004b1c:	08005014 	.word	0x08005014

08004b20 <_init>:
 8004b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b22:	bf00      	nop
 8004b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b26:	bc08      	pop	{r3}
 8004b28:	469e      	mov	lr, r3
 8004b2a:	4770      	bx	lr

08004b2c <_fini>:
 8004b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2e:	bf00      	nop
 8004b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b32:	bc08      	pop	{r3}
 8004b34:	469e      	mov	lr, r3
 8004b36:	4770      	bx	lr
